
OLED_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ab4  10000000  10000000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  10002ab4  10002ab4  00022ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  10002b04  10002b04  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .ARM.extab    00000000  10002b04  10002b04  0003000c  2**0
                  CONTENTS
  5 .ARM          00000000  10002b04  10002b04  0003000c  2**0
                  CONTENTS
  6 .preinit_array 00000000  10002b04  10002b04  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  10002b04  10002b04  00022b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  10002b08  10002b08  00022b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000000c  10020000  10002b0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 00000000  1002000c  1002000c  0003000c  2**0
                  CONTENTS
 11 .bss          00000420  1002000c  10002b18  0003000c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  1002042c  10002f38  0003000c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0003003c  2**0
                  CONTENTS, READONLY
 15 .debug_info   0000a9ce  00000000  00000000  0003007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000153a  00000000  00000000  0003aa4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000648  00000000  00000000  0003bf88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000049f  00000000  00000000  0003c5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000447be  00000000  00000000  0003ca6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0000a0de  00000000  00000000  0008122d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001bfff2  00000000  00000000  0008b30b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00001748  00000000  00000000  0024b300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005f  00000000  00000000  0024ca48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	; (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	; (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	; (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	1002000c 	.word	0x1002000c
1000001c:	00000000 	.word	0x00000000
10000020:	10002a9c 	.word	0x10002a9c

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	; (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	; (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	; (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	10020010 	.word	0x10020010
1000003c:	10002a9c 	.word	0x10002a9c

10000040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10000040:	b480      	push	{r7}
10000042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10000044:	4b0f      	ldr	r3, [pc, #60]	; (10000084 <SystemInit+0x44>)
10000046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
1000004a:	4a0e      	ldr	r2, [pc, #56]	; (10000084 <SystemInit+0x44>)
1000004c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
10000050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10000054:	4b0c      	ldr	r3, [pc, #48]	; (10000088 <SystemInit+0x48>)
10000056:	2200      	movs	r2, #0
10000058:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
1000005a:	4b0b      	ldr	r3, [pc, #44]	; (10000088 <SystemInit+0x48>)
1000005c:	2200      	movs	r2, #0
1000005e:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10000060:	4b09      	ldr	r3, [pc, #36]	; (10000088 <SystemInit+0x48>)
10000062:	2200      	movs	r2, #0
10000064:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10000066:	4b08      	ldr	r3, [pc, #32]	; (10000088 <SystemInit+0x48>)
10000068:	2200      	movs	r2, #0
1000006a:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
1000006c:	4b06      	ldr	r3, [pc, #24]	; (10000088 <SystemInit+0x48>)
1000006e:	2200      	movs	r2, #0
10000070:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
10000072:	4b05      	ldr	r3, [pc, #20]	; (10000088 <SystemInit+0x48>)
10000074:	2200      	movs	r2, #0
10000076:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10000078:	bf00      	nop
1000007a:	46bd      	mov	sp, r7
1000007c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000080:	4770      	bx	lr
10000082:	bf00      	nop
10000084:	e000ed00 	.word	0xe000ed00
10000088:	5000d0c0 	.word	0x5000d0c0

1000008c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
1000008c:	b580      	push	{r7, lr}
1000008e:	b086      	sub	sp, #24
10000090:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
10000092:	1d3b      	adds	r3, r7, #4
10000094:	2200      	movs	r2, #0
10000096:	601a      	str	r2, [r3, #0]
10000098:	605a      	str	r2, [r3, #4]
1000009a:	609a      	str	r2, [r3, #8]
1000009c:	60da      	str	r2, [r3, #12]
1000009e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
100000a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100000a4:	2280      	movs	r2, #128	; 0x80
100000a6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOE_CLK_ENABLE();
100000aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100000ae:	2210      	movs	r2, #16
100000b0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOB_CLK_ENABLE();
100000b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100000b8:	2202      	movs	r2, #2
100000ba:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOI_CLK_ENABLE();
100000be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100000c2:	f44f 7280 	mov.w	r2, #256	; 0x100
100000c6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOA_CLK_ENABLE();
100000ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100000ce:	2201      	movs	r2, #1
100000d0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_8
100000d4:	2201      	movs	r2, #1
100000d6:	f44f 41be 	mov.w	r1, #24320	; 0x5f00
100000da:	4830      	ldr	r0, [pc, #192]	; (1000019c <MX_GPIO_Init+0x110>)
100000dc:	f000 fe7c 	bl	10000dd8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_12, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1|GPIO_PIN_6, GPIO_PIN_SET);
100000e0:	2201      	movs	r2, #1
100000e2:	2142      	movs	r1, #66	; 0x42
100000e4:	482e      	ldr	r0, [pc, #184]	; (100001a0 <MX_GPIO_Init+0x114>)
100000e6:	f000 fe77 	bl	10000dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_SET);
100000ea:	2201      	movs	r2, #1
100000ec:	f44f 71c0 	mov.w	r1, #384	; 0x180
100000f0:	482c      	ldr	r0, [pc, #176]	; (100001a4 <MX_GPIO_Init+0x118>)
100000f2:	f000 fe71 	bl	10000dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_4, GPIO_PIN_SET);
100000f6:	2201      	movs	r2, #1
100000f8:	2110      	movs	r1, #16
100000fa:	482b      	ldr	r0, [pc, #172]	; (100001a8 <MX_GPIO_Init+0x11c>)
100000fc:	f000 fe6c 	bl	10000dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_11, GPIO_PIN_SET);
10000100:	2201      	movs	r2, #1
10000102:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
10000106:	4829      	ldr	r0, [pc, #164]	; (100001ac <MX_GPIO_Init+0x120>)
10000108:	f000 fe66 	bl	10000dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PH10 PH11 PH14 PH8
                           PH9 PH12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_8
1000010c:	f44f 43be 	mov.w	r3, #24320	; 0x5f00
10000110:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
10000112:	2301      	movs	r3, #1
10000114:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
10000116:	2300      	movs	r3, #0
10000118:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
1000011a:	2302      	movs	r3, #2
1000011c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
1000011e:	1d3b      	adds	r3, r7, #4
10000120:	4619      	mov	r1, r3
10000122:	481e      	ldr	r0, [pc, #120]	; (1000019c <MX_GPIO_Init+0x110>)
10000124:	f000 fcae 	bl	10000a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE1 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
10000128:	2342      	movs	r3, #66	; 0x42
1000012a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
1000012c:	2301      	movs	r3, #1
1000012e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
10000130:	2300      	movs	r3, #0
10000132:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
10000134:	2302      	movs	r3, #2
10000136:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
10000138:	1d3b      	adds	r3, r7, #4
1000013a:	4619      	mov	r1, r3
1000013c:	4818      	ldr	r0, [pc, #96]	; (100001a0 <MX_GPIO_Init+0x114>)
1000013e:	f000 fca1 	bl	10000a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
10000142:	f44f 73c0 	mov.w	r3, #384	; 0x180
10000146:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
10000148:	2301      	movs	r3, #1
1000014a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
1000014c:	2300      	movs	r3, #0
1000014e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
10000150:	2302      	movs	r3, #2
10000152:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10000154:	1d3b      	adds	r3, r7, #4
10000156:	4619      	mov	r1, r3
10000158:	4812      	ldr	r0, [pc, #72]	; (100001a4 <MX_GPIO_Init+0x118>)
1000015a:	f000 fc93 	bl	10000a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
1000015e:	2310      	movs	r3, #16
10000160:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
10000162:	2301      	movs	r3, #1
10000164:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
10000166:	2300      	movs	r3, #0
10000168:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
1000016a:	2302      	movs	r3, #2
1000016c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
1000016e:	1d3b      	adds	r3, r7, #4
10000170:	4619      	mov	r1, r3
10000172:	480d      	ldr	r0, [pc, #52]	; (100001a8 <MX_GPIO_Init+0x11c>)
10000174:	f000 fc86 	bl	10000a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_11;
10000178:	f44f 53c2 	mov.w	r3, #6208	; 0x1840
1000017c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
1000017e:	2301      	movs	r3, #1
10000180:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
10000182:	2300      	movs	r3, #0
10000184:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
10000186:	2302      	movs	r3, #2
10000188:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
1000018a:	1d3b      	adds	r3, r7, #4
1000018c:	4619      	mov	r1, r3
1000018e:	4807      	ldr	r0, [pc, #28]	; (100001ac <MX_GPIO_Init+0x120>)
10000190:	f000 fc78 	bl	10000a84 <HAL_GPIO_Init>

}
10000194:	bf00      	nop
10000196:	3718      	adds	r7, #24
10000198:	46bd      	mov	sp, r7
1000019a:	bd80      	pop	{r7, pc}
1000019c:	50009000 	.word	0x50009000
100001a0:	50006000 	.word	0x50006000
100001a4:	50003000 	.word	0x50003000
100001a8:	5000a000 	.word	0x5000a000
100001ac:	50002000 	.word	0x50002000

100001b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
100001b0:	b580      	push	{r7, lr}
100001b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
100001b4:	f000 fac0 	bl	10000738 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  if(IS_ENGINEERING_BOOT_MODE())
100001b8:	4b08      	ldr	r3, [pc, #32]	; (100001dc <main+0x2c>)
100001ba:	681b      	ldr	r3, [r3, #0]
100001bc:	f003 0307 	and.w	r3, r3, #7
100001c0:	2b04      	cmp	r3, #4
100001c2:	d101      	bne.n	100001c8 <main+0x18>
  {
    /* Configure the system clock */
    SystemClock_Config();
100001c4:	f000 f80c 	bl	100001e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
100001c8:	f7ff ff60 	bl	1000008c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  //uint8_t t = 0;
  oled_init(); /* 初始化 OLED */
100001cc:	f000 f9b6 	bl	1000053c <oled_init>
	 // oled_show_char(36, 52, t, 12, 1);/* 显示 ASCII 字符 */
	 // oled_show_num(94, 52, t, 3, 12); /*显示 ASCII 字符的码值 */
	 // oled_refresh_gram(); /*更新显示到 OLED */
	  //t++;
	 // if (t > '~')t = ' ';
	  HAL_Delay(500);
100001d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
100001d4:	f000 fb20 	bl	10000818 <HAL_Delay>
100001d8:	e7fa      	b.n	100001d0 <main+0x20>
100001da:	bf00      	nop
100001dc:	50020000 	.word	0x50020000

100001e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
100001e0:	b580      	push	{r7, lr}
100001e2:	b0d2      	sub	sp, #328	; 0x148
100001e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
100001e6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100001ee:	4618      	mov	r0, r3
100001f0:	f44f 738a 	mov.w	r3, #276	; 0x114
100001f4:	461a      	mov	r2, r3
100001f6:	2100      	movs	r1, #0
100001f8:	f002 fc24 	bl	10002a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
100001fc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000200:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000204:	4618      	mov	r0, r3
10000206:	2330      	movs	r3, #48	; 0x30
10000208:	461a      	mov	r2, r3
1000020a:	2100      	movs	r1, #0
1000020c:	f002 fc1a 	bl	10002a44 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
10000210:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000214:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000218:	220b      	movs	r2, #11
1000021a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
1000021c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000220:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000224:	f44f 7280 	mov.w	r2, #256	; 0x100
10000228:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
1000022a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000022e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000232:	2201      	movs	r2, #1
10000234:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
10000236:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000023a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000023e:	2200      	movs	r2, #0
10000240:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
10000242:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000246:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000024a:	2201      	movs	r2, #1
1000024c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
1000024e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000252:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000256:	2200      	movs	r2, #0
10000258:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
1000025a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000025e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000262:	2200      	movs	r2, #0
10000264:	661a      	str	r2, [r3, #96]	; 0x60
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
10000266:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000026a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000026e:	2202      	movs	r2, #2
10000270:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLL3SOURCE_HSE;
10000274:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000278:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000027c:	2201      	movs	r2, #1
1000027e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  RCC_OscInitStruct.PLL3.PLLM = 2;
10000282:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000286:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000028a:	2202      	movs	r2, #2
1000028c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  RCC_OscInitStruct.PLL3.PLLN = 52;
10000290:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000294:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000298:	2234      	movs	r2, #52	; 0x34
1000029a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  RCC_OscInitStruct.PLL3.PLLP = 3;
1000029e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100002a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100002a6:	2203      	movs	r2, #3
100002a8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  RCC_OscInitStruct.PLL3.PLLQ = 2;
100002ac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100002b0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100002b4:	2202      	movs	r2, #2
100002b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  RCC_OscInitStruct.PLL3.PLLR = 2;
100002ba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100002be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100002c2:	2202      	movs	r2, #2
100002c4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  RCC_OscInitStruct.PLL3.PLLRGE = RCC_PLL3IFRANGE_1;
100002c8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100002cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100002d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
100002d4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  RCC_OscInitStruct.PLL3.PLLFRACV = 2048;
100002d8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100002dc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100002e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
100002e4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  RCC_OscInitStruct.PLL3.PLLMODE = RCC_PLL_FRACTIONAL;
100002e8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100002ec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100002f0:	2201      	movs	r2, #1
100002f2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
100002f6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100002fa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100002fe:	2200      	movs	r2, #0
10000300:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
10000304:	f107 0334 	add.w	r3, r7, #52	; 0x34
10000308:	4618      	mov	r0, r3
1000030a:	f000 fd7f 	bl	10000e0c <HAL_RCC_OscConfig>
1000030e:	4603      	mov	r3, r0
10000310:	2b00      	cmp	r3, #0
10000312:	d001      	beq.n	10000318 <SystemClock_Config+0x138>
  {
    Error_Handler();
10000314:	f000 f852 	bl	100003bc <Error_Handler>
  }

  /** RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
10000318:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000031c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000320:	22fe      	movs	r2, #254	; 0xfe
10000322:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                              |RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_HSI;
10000324:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000328:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000032c:	2200      	movs	r2, #0
1000032e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
10000330:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000334:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000338:	2200      	movs	r2, #0
1000033a:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_PLL3;
1000033c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000340:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000344:	2203      	movs	r2, #3
10000346:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
10000348:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000034c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000350:	2200      	movs	r2, #0
10000352:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV1;
10000354:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000358:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000035c:	2200      	movs	r2, #0
1000035e:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV1;
10000360:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000364:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000368:	2200      	movs	r2, #0
1000036a:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV2;
1000036c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000370:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000374:	2201      	movs	r2, #1
10000376:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV2;
10000378:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000037c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000380:	2201      	movs	r2, #1
10000382:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV2;
10000384:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000388:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000038c:	2201      	movs	r2, #1
1000038e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
10000390:	1d3b      	adds	r3, r7, #4
10000392:	4618      	mov	r0, r3
10000394:	f001 fad8 	bl	10001948 <HAL_RCC_ClockConfig>
10000398:	4603      	mov	r3, r0
1000039a:	2b00      	cmp	r3, #0
1000039c:	d001      	beq.n	100003a2 <SystemClock_Config+0x1c2>
  {
    Error_Handler();
1000039e:	f000 f80d 	bl	100003bc <Error_Handler>
  }

  /** Set the HSE division factor for RTC clock
  */
  __HAL_RCC_RTC_HSEDIV(1);
100003a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100003a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
100003a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100003ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
100003b0:	6453      	str	r3, [r2, #68]	; 0x44
}
100003b2:	bf00      	nop
100003b4:	f507 77a4 	add.w	r7, r7, #328	; 0x148
100003b8:	46bd      	mov	sp, r7
100003ba:	bd80      	pop	{r7, pc}

100003bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
100003bc:	b480      	push	{r7}
100003be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
100003c0:	b672      	cpsid	i
}
100003c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
100003c4:	e7fe      	b.n	100003c4 <Error_Handler+0x8>
	...

100003c8 <oled_refresh_gram>:
 * @param       无
 * @retval      无
 */
/*二维数组 g_oled_gram 的值一次性刷新到OLED 的显存 GRAM 中*/
void oled_refresh_gram(void)
{
100003c8:	b580      	push	{r7, lr}
100003ca:	b082      	sub	sp, #8
100003cc:	af00      	add	r7, sp, #0
    uint8_t i, n;

    for (i = 0; i < 8; i++)
100003ce:	2300      	movs	r3, #0
100003d0:	71fb      	strb	r3, [r7, #7]
100003d2:	e026      	b.n	10000422 <oled_refresh_gram+0x5a>
    {
        oled_wr_byte (0xb0 + i, OLED_CMD); /* 设置页地址（0~7），CMD表示写入命令*/
100003d4:	79fb      	ldrb	r3, [r7, #7]
100003d6:	3b50      	subs	r3, #80	; 0x50
100003d8:	b2db      	uxtb	r3, r3
100003da:	2100      	movs	r1, #0
100003dc:	4618      	mov	r0, r3
100003de:	f000 f82b 	bl	10000438 <oled_wr_byte>
        oled_wr_byte (0x00, OLED_CMD);     /* 设置显示位置—列低地址 */
100003e2:	2100      	movs	r1, #0
100003e4:	2000      	movs	r0, #0
100003e6:	f000 f827 	bl	10000438 <oled_wr_byte>
        oled_wr_byte (0x10, OLED_CMD);     /* 设置显示位置—列高地址 */
100003ea:	2100      	movs	r1, #0
100003ec:	2010      	movs	r0, #16
100003ee:	f000 f823 	bl	10000438 <oled_wr_byte>

        for (n = 0; n < 128; n++)
100003f2:	2300      	movs	r3, #0
100003f4:	71bb      	strb	r3, [r7, #6]
100003f6:	e00d      	b.n	10000414 <oled_refresh_gram+0x4c>
        {
            oled_wr_byte(g_oled_gram[n][i], OLED_DATA);
100003f8:	79ba      	ldrb	r2, [r7, #6]
100003fa:	79fb      	ldrb	r3, [r7, #7]
100003fc:	490d      	ldr	r1, [pc, #52]	; (10000434 <oled_refresh_gram+0x6c>)
100003fe:	00d2      	lsls	r2, r2, #3
10000400:	440a      	add	r2, r1
10000402:	4413      	add	r3, r2
10000404:	781b      	ldrb	r3, [r3, #0]
10000406:	2101      	movs	r1, #1
10000408:	4618      	mov	r0, r3
1000040a:	f000 f815 	bl	10000438 <oled_wr_byte>
        for (n = 0; n < 128; n++)
1000040e:	79bb      	ldrb	r3, [r7, #6]
10000410:	3301      	adds	r3, #1
10000412:	71bb      	strb	r3, [r7, #6]
10000414:	f997 3006 	ldrsb.w	r3, [r7, #6]
10000418:	2b00      	cmp	r3, #0
1000041a:	daed      	bge.n	100003f8 <oled_refresh_gram+0x30>
    for (i = 0; i < 8; i++)
1000041c:	79fb      	ldrb	r3, [r7, #7]
1000041e:	3301      	adds	r3, #1
10000420:	71fb      	strb	r3, [r7, #7]
10000422:	79fb      	ldrb	r3, [r7, #7]
10000424:	2b07      	cmp	r3, #7
10000426:	d9d5      	bls.n	100003d4 <oled_refresh_gram+0xc>
        }
    }
}
10000428:	bf00      	nop
1000042a:	bf00      	nop
1000042c:	3708      	adds	r7, #8
1000042e:	46bd      	mov	sp, r7
10000430:	bd80      	pop	{r7, pc}
10000432:	bf00      	nop
10000434:	10020028 	.word	0x10020028

10000438 <oled_wr_byte>:
 * @retval      无
 */
#else   /* 使用SPI驱动OLED */

void oled_wr_byte(uint8_t data, uint8_t cmd)
{
10000438:	b580      	push	{r7, lr}
1000043a:	b084      	sub	sp, #16
1000043c:	af00      	add	r7, sp, #0
1000043e:	4603      	mov	r3, r0
10000440:	460a      	mov	r2, r1
10000442:	71fb      	strb	r3, [r7, #7]
10000444:	4613      	mov	r3, r2
10000446:	71bb      	strb	r3, [r7, #6]
    uint8_t i;
    OLED_RS(cmd);   /* 写命令 */
10000448:	79bb      	ldrb	r3, [r7, #6]
1000044a:	2b00      	cmp	r3, #0
1000044c:	d006      	beq.n	1000045c <oled_wr_byte+0x24>
1000044e:	2201      	movs	r2, #1
10000450:	f44f 6100 	mov.w	r1, #2048	; 0x800
10000454:	4823      	ldr	r0, [pc, #140]	; (100004e4 <oled_wr_byte+0xac>)
10000456:	f000 fcbf 	bl	10000dd8 <HAL_GPIO_WritePin>
1000045a:	e005      	b.n	10000468 <oled_wr_byte+0x30>
1000045c:	2200      	movs	r2, #0
1000045e:	f44f 6100 	mov.w	r1, #2048	; 0x800
10000462:	4820      	ldr	r0, [pc, #128]	; (100004e4 <oled_wr_byte+0xac>)
10000464:	f000 fcb8 	bl	10000dd8 <HAL_GPIO_WritePin>
    OLED_CS(0);
10000468:	2200      	movs	r2, #0
1000046a:	2180      	movs	r1, #128	; 0x80
1000046c:	481e      	ldr	r0, [pc, #120]	; (100004e8 <oled_wr_byte+0xb0>)
1000046e:	f000 fcb3 	bl	10000dd8 <HAL_GPIO_WritePin>

    for (i = 0; i < 8; i++)/*逐位传输数据，先传输高位*/
10000472:	2300      	movs	r3, #0
10000474:	73fb      	strb	r3, [r7, #15]
10000476:	e022      	b.n	100004be <oled_wr_byte+0x86>
    {
        OLED_SCLK(0);
10000478:	2200      	movs	r2, #0
1000047a:	f44f 7100 	mov.w	r1, #512	; 0x200
1000047e:	481b      	ldr	r0, [pc, #108]	; (100004ec <oled_wr_byte+0xb4>)
10000480:	f000 fcaa 	bl	10000dd8 <HAL_GPIO_WritePin>

        if (data & 0x80)
10000484:	f997 3007 	ldrsb.w	r3, [r7, #7]
10000488:	2b00      	cmp	r3, #0
1000048a:	da06      	bge.n	1000049a <oled_wr_byte+0x62>
        {
            OLED_SDIN(1);
1000048c:	2201      	movs	r2, #1
1000048e:	f44f 6180 	mov.w	r1, #1024	; 0x400
10000492:	4816      	ldr	r0, [pc, #88]	; (100004ec <oled_wr_byte+0xb4>)
10000494:	f000 fca0 	bl	10000dd8 <HAL_GPIO_WritePin>
10000498:	e005      	b.n	100004a6 <oled_wr_byte+0x6e>
        }
        else
        {
            OLED_SDIN(0);
1000049a:	2200      	movs	r2, #0
1000049c:	f44f 6180 	mov.w	r1, #1024	; 0x400
100004a0:	4812      	ldr	r0, [pc, #72]	; (100004ec <oled_wr_byte+0xb4>)
100004a2:	f000 fc99 	bl	10000dd8 <HAL_GPIO_WritePin>
        }
        OLED_SCLK(1);
100004a6:	2201      	movs	r2, #1
100004a8:	f44f 7100 	mov.w	r1, #512	; 0x200
100004ac:	480f      	ldr	r0, [pc, #60]	; (100004ec <oled_wr_byte+0xb4>)
100004ae:	f000 fc93 	bl	10000dd8 <HAL_GPIO_WritePin>
        data <<= 1;
100004b2:	79fb      	ldrb	r3, [r7, #7]
100004b4:	005b      	lsls	r3, r3, #1
100004b6:	71fb      	strb	r3, [r7, #7]
    for (i = 0; i < 8; i++)/*逐位传输数据，先传输高位*/
100004b8:	7bfb      	ldrb	r3, [r7, #15]
100004ba:	3301      	adds	r3, #1
100004bc:	73fb      	strb	r3, [r7, #15]
100004be:	7bfb      	ldrb	r3, [r7, #15]
100004c0:	2b07      	cmp	r3, #7
100004c2:	d9d9      	bls.n	10000478 <oled_wr_byte+0x40>
    }

    OLED_CS(1);
100004c4:	2201      	movs	r2, #1
100004c6:	2180      	movs	r1, #128	; 0x80
100004c8:	4807      	ldr	r0, [pc, #28]	; (100004e8 <oled_wr_byte+0xb0>)
100004ca:	f000 fc85 	bl	10000dd8 <HAL_GPIO_WritePin>
    OLED_RS(1);
100004ce:	2201      	movs	r2, #1
100004d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
100004d4:	4803      	ldr	r0, [pc, #12]	; (100004e4 <oled_wr_byte+0xac>)
100004d6:	f000 fc7f 	bl	10000dd8 <HAL_GPIO_WritePin>
}
100004da:	bf00      	nop
100004dc:	3710      	adds	r7, #16
100004de:	46bd      	mov	sp, r7
100004e0:	bd80      	pop	{r7, pc}
100004e2:	bf00      	nop
100004e4:	50002000 	.word	0x50002000
100004e8:	50003000 	.word	0x50003000
100004ec:	50009000 	.word	0x50009000

100004f0 <oled_clear>:
 * @brief       清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!
 * @param       无
 * @retval      无
 */
void oled_clear(void)
{
100004f0:	b580      	push	{r7, lr}
100004f2:	b082      	sub	sp, #8
100004f4:	af00      	add	r7, sp, #0
    uint8_t i, n;

    for (i = 0; i < 8; i++)for (n = 0; n < 128; n++)g_oled_gram[n][i] = 0X00;
100004f6:	2300      	movs	r3, #0
100004f8:	71fb      	strb	r3, [r7, #7]
100004fa:	e014      	b.n	10000526 <oled_clear+0x36>
100004fc:	2300      	movs	r3, #0
100004fe:	71bb      	strb	r3, [r7, #6]
10000500:	e00a      	b.n	10000518 <oled_clear+0x28>
10000502:	79ba      	ldrb	r2, [r7, #6]
10000504:	79fb      	ldrb	r3, [r7, #7]
10000506:	490c      	ldr	r1, [pc, #48]	; (10000538 <oled_clear+0x48>)
10000508:	00d2      	lsls	r2, r2, #3
1000050a:	440a      	add	r2, r1
1000050c:	4413      	add	r3, r2
1000050e:	2200      	movs	r2, #0
10000510:	701a      	strb	r2, [r3, #0]
10000512:	79bb      	ldrb	r3, [r7, #6]
10000514:	3301      	adds	r3, #1
10000516:	71bb      	strb	r3, [r7, #6]
10000518:	f997 3006 	ldrsb.w	r3, [r7, #6]
1000051c:	2b00      	cmp	r3, #0
1000051e:	daf0      	bge.n	10000502 <oled_clear+0x12>
10000520:	79fb      	ldrb	r3, [r7, #7]
10000522:	3301      	adds	r3, #1
10000524:	71fb      	strb	r3, [r7, #7]
10000526:	79fb      	ldrb	r3, [r7, #7]
10000528:	2b07      	cmp	r3, #7
1000052a:	d9e7      	bls.n	100004fc <oled_clear+0xc>

    oled_refresh_gram();    /* 更新显示 */
1000052c:	f7ff ff4c 	bl	100003c8 <oled_refresh_gram>
}
10000530:	bf00      	nop
10000532:	3708      	adds	r7, #8
10000534:	46bd      	mov	sp, r7
10000536:	bd80      	pop	{r7, pc}
10000538:	10020028 	.word	0x10020028

1000053c <oled_init>:
 * @brief       初始化OLED(SSD1306)
 * @param       无
 * @retval      无
 */
void oled_init(void)
{
1000053c:	b580      	push	{r7, lr}
1000053e:	af00      	add	r7, sp, #0
#if OLED_MODE==1         /* 使用8080并口模式 */
	OLED_WR(1);
	OLED_RD(1);
#else
	OLED_SDIN(1);
10000540:	2201      	movs	r2, #1
10000542:	f44f 6180 	mov.w	r1, #1024	; 0x400
10000546:	4844      	ldr	r0, [pc, #272]	; (10000658 <oled_init+0x11c>)
10000548:	f000 fc46 	bl	10000dd8 <HAL_GPIO_WritePin>
	OLED_SCLK(1);
1000054c:	2201      	movs	r2, #1
1000054e:	f44f 7100 	mov.w	r1, #512	; 0x200
10000552:	4841      	ldr	r0, [pc, #260]	; (10000658 <oled_init+0x11c>)
10000554:	f000 fc40 	bl	10000dd8 <HAL_GPIO_WritePin>
#endif

/*两种模式共用引脚*/
    OLED_CS(1);
10000558:	2201      	movs	r2, #1
1000055a:	2180      	movs	r1, #128	; 0x80
1000055c:	483f      	ldr	r0, [pc, #252]	; (1000065c <oled_init+0x120>)
1000055e:	f000 fc3b 	bl	10000dd8 <HAL_GPIO_WritePin>
    OLED_RS(1);
10000562:	2201      	movs	r2, #1
10000564:	f44f 6100 	mov.w	r1, #2048	; 0x800
10000568:	483d      	ldr	r0, [pc, #244]	; (10000660 <oled_init+0x124>)
1000056a:	f000 fc35 	bl	10000dd8 <HAL_GPIO_WritePin>
    OLED_RST(0);/*复位*/
1000056e:	2200      	movs	r2, #0
10000570:	2102      	movs	r1, #2
10000572:	483c      	ldr	r0, [pc, #240]	; (10000664 <oled_init+0x128>)
10000574:	f000 fc30 	bl	10000dd8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
10000578:	2064      	movs	r0, #100	; 0x64
1000057a:	f000 f94d 	bl	10000818 <HAL_Delay>
    OLED_RST(1);
1000057e:	2201      	movs	r2, #1
10000580:	2102      	movs	r1, #2
10000582:	4838      	ldr	r0, [pc, #224]	; (10000664 <oled_init+0x128>)
10000584:	f000 fc28 	bl	10000dd8 <HAL_GPIO_WritePin>

    oled_wr_byte(0xAE, OLED_CMD);   /* 关闭显示 */
10000588:	2100      	movs	r1, #0
1000058a:	20ae      	movs	r0, #174	; 0xae
1000058c:	f7ff ff54 	bl	10000438 <oled_wr_byte>
    oled_wr_byte(0xD5, OLED_CMD);   /* 设置时钟分频因子,震荡频率 */
10000590:	2100      	movs	r1, #0
10000592:	20d5      	movs	r0, #213	; 0xd5
10000594:	f7ff ff50 	bl	10000438 <oled_wr_byte>
    oled_wr_byte(80, OLED_CMD);     /* [3:0],分频因子;[7:4],震荡频率 */
10000598:	2100      	movs	r1, #0
1000059a:	2050      	movs	r0, #80	; 0x50
1000059c:	f7ff ff4c 	bl	10000438 <oled_wr_byte>
    oled_wr_byte(0xA8, OLED_CMD);   /* 设置驱动路数 */
100005a0:	2100      	movs	r1, #0
100005a2:	20a8      	movs	r0, #168	; 0xa8
100005a4:	f7ff ff48 	bl	10000438 <oled_wr_byte>
    oled_wr_byte(0X3F, OLED_CMD);   /* 默认0X3F(1/64) */
100005a8:	2100      	movs	r1, #0
100005aa:	203f      	movs	r0, #63	; 0x3f
100005ac:	f7ff ff44 	bl	10000438 <oled_wr_byte>
    oled_wr_byte(0xD3, OLED_CMD);   /* 设置显示偏移 */
100005b0:	2100      	movs	r1, #0
100005b2:	20d3      	movs	r0, #211	; 0xd3
100005b4:	f7ff ff40 	bl	10000438 <oled_wr_byte>
    oled_wr_byte(0X00, OLED_CMD);   /* 默认为0 */
100005b8:	2100      	movs	r1, #0
100005ba:	2000      	movs	r0, #0
100005bc:	f7ff ff3c 	bl	10000438 <oled_wr_byte>

    oled_wr_byte(0x40, OLED_CMD);   /* 设置显示开始行 [5:0],行数. */
100005c0:	2100      	movs	r1, #0
100005c2:	2040      	movs	r0, #64	; 0x40
100005c4:	f7ff ff38 	bl	10000438 <oled_wr_byte>

    oled_wr_byte(0x8D, OLED_CMD);   /* 电荷泵设置 */
100005c8:	2100      	movs	r1, #0
100005ca:	208d      	movs	r0, #141	; 0x8d
100005cc:	f7ff ff34 	bl	10000438 <oled_wr_byte>
    oled_wr_byte(0x14, OLED_CMD);   /* bit2，开启/关闭 */
100005d0:	2100      	movs	r1, #0
100005d2:	2014      	movs	r0, #20
100005d4:	f7ff ff30 	bl	10000438 <oled_wr_byte>
    oled_wr_byte(0x20, OLED_CMD);   /* 设置内存地址模式 */
100005d8:	2100      	movs	r1, #0
100005da:	2020      	movs	r0, #32
100005dc:	f7ff ff2c 	bl	10000438 <oled_wr_byte>
    oled_wr_byte(0x02, OLED_CMD);   /* [1:0],00，列地址模式;01，行地址模式;10,页地址模式;默认10; */
100005e0:	2100      	movs	r1, #0
100005e2:	2002      	movs	r0, #2
100005e4:	f7ff ff28 	bl	10000438 <oled_wr_byte>
    oled_wr_byte(0xA1, OLED_CMD);   /* 段重定义设置,bit0:0,0->0;1,0->127; */
100005e8:	2100      	movs	r1, #0
100005ea:	20a1      	movs	r0, #161	; 0xa1
100005ec:	f7ff ff24 	bl	10000438 <oled_wr_byte>
    oled_wr_byte(0xC0, OLED_CMD);   /* 设置COM扫描方向;bit3:0,普通模式;1,重定义模式 COM[N-1]->COM0;N:驱动路数 */
100005f0:	2100      	movs	r1, #0
100005f2:	20c0      	movs	r0, #192	; 0xc0
100005f4:	f7ff ff20 	bl	10000438 <oled_wr_byte>
    oled_wr_byte(0xDA, OLED_CMD);   /* 设置COM硬件引脚配置 */
100005f8:	2100      	movs	r1, #0
100005fa:	20da      	movs	r0, #218	; 0xda
100005fc:	f7ff ff1c 	bl	10000438 <oled_wr_byte>
    oled_wr_byte(0x12, OLED_CMD);   /* [5:4]配置 */
10000600:	2100      	movs	r1, #0
10000602:	2012      	movs	r0, #18
10000604:	f7ff ff18 	bl	10000438 <oled_wr_byte>

    oled_wr_byte(0x81, OLED_CMD);   /* 对比度设置 */
10000608:	2100      	movs	r1, #0
1000060a:	2081      	movs	r0, #129	; 0x81
1000060c:	f7ff ff14 	bl	10000438 <oled_wr_byte>
    oled_wr_byte(0xEF, OLED_CMD);   /* 1~255;默认0X7F (亮度设置,越大越亮) */
10000610:	2100      	movs	r1, #0
10000612:	20ef      	movs	r0, #239	; 0xef
10000614:	f7ff ff10 	bl	10000438 <oled_wr_byte>
    oled_wr_byte(0xD9, OLED_CMD);   /* 设置预充电周期 */
10000618:	2100      	movs	r1, #0
1000061a:	20d9      	movs	r0, #217	; 0xd9
1000061c:	f7ff ff0c 	bl	10000438 <oled_wr_byte>
    oled_wr_byte(0xf1, OLED_CMD);   /* [3:0],PHASE 1;[7:4],PHASE 2; */
10000620:	2100      	movs	r1, #0
10000622:	20f1      	movs	r0, #241	; 0xf1
10000624:	f7ff ff08 	bl	10000438 <oled_wr_byte>
    oled_wr_byte(0xDB, OLED_CMD);   /* 设置VCOMH 电压倍率 */
10000628:	2100      	movs	r1, #0
1000062a:	20db      	movs	r0, #219	; 0xdb
1000062c:	f7ff ff04 	bl	10000438 <oled_wr_byte>
    oled_wr_byte(0x30, OLED_CMD);   /* [6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc; */
10000630:	2100      	movs	r1, #0
10000632:	2030      	movs	r0, #48	; 0x30
10000634:	f7ff ff00 	bl	10000438 <oled_wr_byte>

    oled_wr_byte(0xA4, OLED_CMD);   /* 全局显示开启;bit0:1,开启;0,关闭;(白屏/黑屏) */
10000638:	2100      	movs	r1, #0
1000063a:	20a4      	movs	r0, #164	; 0xa4
1000063c:	f7ff fefc 	bl	10000438 <oled_wr_byte>
    oled_wr_byte(0xA6, OLED_CMD);   /* 设置显示方式;bit0:1,反相显示;0,正常显示 */
10000640:	2100      	movs	r1, #0
10000642:	20a6      	movs	r0, #166	; 0xa6
10000644:	f7ff fef8 	bl	10000438 <oled_wr_byte>
    oled_wr_byte(0xAF, OLED_CMD);   /* 开启显示 */
10000648:	2100      	movs	r1, #0
1000064a:	20af      	movs	r0, #175	; 0xaf
1000064c:	f7ff fef4 	bl	10000438 <oled_wr_byte>
    oled_clear();
10000650:	f7ff ff4e 	bl	100004f0 <oled_clear>
}
10000654:	bf00      	nop
10000656:	bd80      	pop	{r7, pc}
10000658:	50009000 	.word	0x50009000
1000065c:	50003000 	.word	0x50003000
10000660:	50002000 	.word	0x50002000
10000664:	50006000 	.word	0x50006000

10000668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10000668:	b580      	push	{r7, lr}
1000066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
1000066c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000670:	f44f 6200 	mov.w	r2, #2048	; 0x800
10000674:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
10000678:	2200      	movs	r2, #0
1000067a:	2101      	movs	r1, #1
1000067c:	f06f 000b 	mvn.w	r0, #11
10000680:	f000 f9c9 	bl	10000a16 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
10000684:	2200      	movs	r2, #0
10000686:	2101      	movs	r1, #1
10000688:	f06f 000a 	mvn.w	r0, #10
1000068c:	f000 f9c3 	bl	10000a16 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
10000690:	2200      	movs	r2, #0
10000692:	2101      	movs	r1, #1
10000694:	f06f 0009 	mvn.w	r0, #9
10000698:	f000 f9bd 	bl	10000a16 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
1000069c:	2200      	movs	r2, #0
1000069e:	2101      	movs	r1, #1
100006a0:	f06f 0004 	mvn.w	r0, #4
100006a4:	f000 f9b7 	bl	10000a16 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
100006a8:	2200      	movs	r2, #0
100006aa:	2101      	movs	r1, #1
100006ac:	f06f 0003 	mvn.w	r0, #3
100006b0:	f000 f9b1 	bl	10000a16 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
100006b4:	2200      	movs	r2, #0
100006b6:	2101      	movs	r1, #1
100006b8:	f06f 0001 	mvn.w	r0, #1
100006bc:	f000 f9ab 	bl	10000a16 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_WAKEUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_WAKEUP_IRQn, 0, 0);
100006c0:	2200      	movs	r2, #0
100006c2:	2100      	movs	r1, #0
100006c4:	2091      	movs	r0, #145	; 0x91
100006c6:	f000 f9a6 	bl	10000a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_WAKEUP_IRQn);
100006ca:	2091      	movs	r0, #145	; 0x91
100006cc:	f000 f9bf 	bl	10000a4e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
100006d0:	bf00      	nop
100006d2:	bd80      	pop	{r7, pc}

100006d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
100006d4:	b480      	push	{r7}
100006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
100006d8:	e7fe      	b.n	100006d8 <NMI_Handler+0x4>

100006da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
100006da:	b480      	push	{r7}
100006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
100006de:	e7fe      	b.n	100006de <HardFault_Handler+0x4>

100006e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
100006e0:	b480      	push	{r7}
100006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
100006e4:	e7fe      	b.n	100006e4 <MemManage_Handler+0x4>

100006e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
100006e6:	b480      	push	{r7}
100006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
100006ea:	e7fe      	b.n	100006ea <BusFault_Handler+0x4>

100006ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
100006ec:	b480      	push	{r7}
100006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
100006f0:	e7fe      	b.n	100006f0 <UsageFault_Handler+0x4>

100006f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
100006f2:	b480      	push	{r7}
100006f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
100006f6:	bf00      	nop
100006f8:	46bd      	mov	sp, r7
100006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
100006fe:	4770      	bx	lr

10000700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
10000700:	b480      	push	{r7}
10000702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
10000704:	bf00      	nop
10000706:	46bd      	mov	sp, r7
10000708:	f85d 7b04 	ldr.w	r7, [sp], #4
1000070c:	4770      	bx	lr

1000070e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
1000070e:	b480      	push	{r7}
10000710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10000712:	bf00      	nop
10000714:	46bd      	mov	sp, r7
10000716:	f85d 7b04 	ldr.w	r7, [sp], #4
1000071a:	4770      	bx	lr

1000071c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
1000071c:	b580      	push	{r7, lr}
1000071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10000720:	f000 f85a 	bl	100007d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10000724:	bf00      	nop
10000726:	bd80      	pop	{r7, pc}

10000728 <RCC_WAKEUP_IRQHandler>:

/**
  * @brief This function handles RCC wake-up interrupt.
  */
void RCC_WAKEUP_IRQHandler(void)
{
10000728:	b580      	push	{r7, lr}
1000072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 0 */

  /* USER CODE END RCC_WAKEUP_IRQn 0 */
  HAL_RCC_WAKEUP_IRQHandler();
1000072c:	f001 fd2a 	bl	10002184 <HAL_RCC_WAKEUP_IRQHandler>
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 1 */

  /* USER CODE END RCC_WAKEUP_IRQn 1 */
}
10000730:	bf00      	nop
10000732:	bd80      	pop	{r7, pc}

10000734 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
10000734:	e7fe      	b.n	10000734 <ADC1_IRQHandler>
	...

10000738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10000738:	b580      	push	{r7, lr}
1000073a:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
1000073c:	2003      	movs	r0, #3
1000073e:	f000 f95f 	bl	10000a00 <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10000742:	f001 fcde 	bl	10002102 <HAL_RCC_GetSystemCoreClockFreq>
10000746:	4603      	mov	r3, r0
10000748:	4a07      	ldr	r2, [pc, #28]	; (10000768 <HAL_Init+0x30>)
1000074a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
1000074c:	200f      	movs	r0, #15
1000074e:	f000 f80d 	bl	1000076c <HAL_InitTick>
10000752:	4603      	mov	r3, r0
10000754:	2b00      	cmp	r3, #0
10000756:	d001      	beq.n	1000075c <HAL_Init+0x24>
  {
    return HAL_ERROR;
10000758:	2301      	movs	r3, #1
1000075a:	e002      	b.n	10000762 <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
1000075c:	f7ff ff84 	bl	10000668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
10000760:	2300      	movs	r3, #0
}
10000762:	4618      	mov	r0, r3
10000764:	bd80      	pop	{r7, pc}
10000766:	bf00      	nop
10000768:	10020000 	.word	0x10020000

1000076c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
1000076c:	b580      	push	{r7, lr}
1000076e:	b082      	sub	sp, #8
10000770:	af00      	add	r7, sp, #0
10000772:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
10000774:	4b15      	ldr	r3, [pc, #84]	; (100007cc <HAL_InitTick+0x60>)
10000776:	781b      	ldrb	r3, [r3, #0]
10000778:	2b00      	cmp	r3, #0
1000077a:	d101      	bne.n	10000780 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
1000077c:	2301      	movs	r3, #1
1000077e:	e021      	b.n	100007c4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
10000780:	4b13      	ldr	r3, [pc, #76]	; (100007d0 <HAL_InitTick+0x64>)
10000782:	681a      	ldr	r2, [r3, #0]
10000784:	4b11      	ldr	r3, [pc, #68]	; (100007cc <HAL_InitTick+0x60>)
10000786:	781b      	ldrb	r3, [r3, #0]
10000788:	4619      	mov	r1, r3
1000078a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1000078e:	fbb3 f3f1 	udiv	r3, r3, r1
10000792:	fbb2 f3f3 	udiv	r3, r2, r3
10000796:	4618      	mov	r0, r3
10000798:	f000 f967 	bl	10000a6a <HAL_SYSTICK_Config>
1000079c:	4603      	mov	r3, r0
1000079e:	2b00      	cmp	r3, #0
100007a0:	d001      	beq.n	100007a6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
100007a2:	2301      	movs	r3, #1
100007a4:	e00e      	b.n	100007c4 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
100007a6:	687b      	ldr	r3, [r7, #4]
100007a8:	2b0f      	cmp	r3, #15
100007aa:	d80a      	bhi.n	100007c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
100007ac:	2200      	movs	r2, #0
100007ae:	6879      	ldr	r1, [r7, #4]
100007b0:	f04f 30ff 	mov.w	r0, #4294967295
100007b4:	f000 f92f 	bl	10000a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
100007b8:	4a06      	ldr	r2, [pc, #24]	; (100007d4 <HAL_InitTick+0x68>)
100007ba:	687b      	ldr	r3, [r7, #4]
100007bc:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
100007be:	2300      	movs	r3, #0
100007c0:	e000      	b.n	100007c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
100007c2:	2301      	movs	r3, #1
}
100007c4:	4618      	mov	r0, r3
100007c6:	3708      	adds	r7, #8
100007c8:	46bd      	mov	sp, r7
100007ca:	bd80      	pop	{r7, pc}
100007cc:	10020008 	.word	0x10020008
100007d0:	10020000 	.word	0x10020000
100007d4:	10020004 	.word	0x10020004

100007d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
100007d8:	b480      	push	{r7}
100007da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
100007dc:	4b06      	ldr	r3, [pc, #24]	; (100007f8 <HAL_IncTick+0x20>)
100007de:	781b      	ldrb	r3, [r3, #0]
100007e0:	461a      	mov	r2, r3
100007e2:	4b06      	ldr	r3, [pc, #24]	; (100007fc <HAL_IncTick+0x24>)
100007e4:	681b      	ldr	r3, [r3, #0]
100007e6:	4413      	add	r3, r2
100007e8:	4a04      	ldr	r2, [pc, #16]	; (100007fc <HAL_IncTick+0x24>)
100007ea:	6013      	str	r3, [r2, #0]
}
100007ec:	bf00      	nop
100007ee:	46bd      	mov	sp, r7
100007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
100007f4:	4770      	bx	lr
100007f6:	bf00      	nop
100007f8:	10020008 	.word	0x10020008
100007fc:	10020428 	.word	0x10020428

10000800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10000800:	b480      	push	{r7}
10000802:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
10000804:	4b03      	ldr	r3, [pc, #12]	; (10000814 <HAL_GetTick+0x14>)
10000806:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
10000808:	4618      	mov	r0, r3
1000080a:	46bd      	mov	sp, r7
1000080c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000810:	4770      	bx	lr
10000812:	bf00      	nop
10000814:	10020428 	.word	0x10020428

10000818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
10000818:	b580      	push	{r7, lr}
1000081a:	b084      	sub	sp, #16
1000081c:	af00      	add	r7, sp, #0
1000081e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
10000820:	f7ff ffee 	bl	10000800 <HAL_GetTick>
10000824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
10000826:	687b      	ldr	r3, [r7, #4]
10000828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
1000082a:	68fb      	ldr	r3, [r7, #12]
1000082c:	f1b3 3fff 	cmp.w	r3, #4294967295
10000830:	d005      	beq.n	1000083e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
10000832:	4b0a      	ldr	r3, [pc, #40]	; (1000085c <HAL_Delay+0x44>)
10000834:	781b      	ldrb	r3, [r3, #0]
10000836:	461a      	mov	r2, r3
10000838:	68fb      	ldr	r3, [r7, #12]
1000083a:	4413      	add	r3, r2
1000083c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
1000083e:	bf00      	nop
10000840:	f7ff ffde 	bl	10000800 <HAL_GetTick>
10000844:	4602      	mov	r2, r0
10000846:	68bb      	ldr	r3, [r7, #8]
10000848:	1ad3      	subs	r3, r2, r3
1000084a:	68fa      	ldr	r2, [r7, #12]
1000084c:	429a      	cmp	r2, r3
1000084e:	d8f7      	bhi.n	10000840 <HAL_Delay+0x28>
  {
  }
}
10000850:	bf00      	nop
10000852:	bf00      	nop
10000854:	3710      	adds	r7, #16
10000856:	46bd      	mov	sp, r7
10000858:	bd80      	pop	{r7, pc}
1000085a:	bf00      	nop
1000085c:	10020008 	.word	0x10020008

10000860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10000860:	b480      	push	{r7}
10000862:	b085      	sub	sp, #20
10000864:	af00      	add	r7, sp, #0
10000866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
10000868:	687b      	ldr	r3, [r7, #4]
1000086a:	f003 0307 	and.w	r3, r3, #7
1000086e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
10000870:	4b0c      	ldr	r3, [pc, #48]	; (100008a4 <__NVIC_SetPriorityGrouping+0x44>)
10000872:	68db      	ldr	r3, [r3, #12]
10000874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
10000876:	68ba      	ldr	r2, [r7, #8]
10000878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
1000087c:	4013      	ands	r3, r2
1000087e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
10000880:	68fb      	ldr	r3, [r7, #12]
10000882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10000884:	68bb      	ldr	r3, [r7, #8]
10000886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
10000888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
1000088c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
10000890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
10000892:	4a04      	ldr	r2, [pc, #16]	; (100008a4 <__NVIC_SetPriorityGrouping+0x44>)
10000894:	68bb      	ldr	r3, [r7, #8]
10000896:	60d3      	str	r3, [r2, #12]
}
10000898:	bf00      	nop
1000089a:	3714      	adds	r7, #20
1000089c:	46bd      	mov	sp, r7
1000089e:	f85d 7b04 	ldr.w	r7, [sp], #4
100008a2:	4770      	bx	lr
100008a4:	e000ed00 	.word	0xe000ed00

100008a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
100008a8:	b480      	push	{r7}
100008aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
100008ac:	4b04      	ldr	r3, [pc, #16]	; (100008c0 <__NVIC_GetPriorityGrouping+0x18>)
100008ae:	68db      	ldr	r3, [r3, #12]
100008b0:	0a1b      	lsrs	r3, r3, #8
100008b2:	f003 0307 	and.w	r3, r3, #7
}
100008b6:	4618      	mov	r0, r3
100008b8:	46bd      	mov	sp, r7
100008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
100008be:	4770      	bx	lr
100008c0:	e000ed00 	.word	0xe000ed00

100008c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
100008c4:	b480      	push	{r7}
100008c6:	b083      	sub	sp, #12
100008c8:	af00      	add	r7, sp, #0
100008ca:	4603      	mov	r3, r0
100008cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
100008ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100008d2:	2b00      	cmp	r3, #0
100008d4:	db0b      	blt.n	100008ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100008d6:	88fb      	ldrh	r3, [r7, #6]
100008d8:	f003 021f 	and.w	r2, r3, #31
100008dc:	4907      	ldr	r1, [pc, #28]	; (100008fc <__NVIC_EnableIRQ+0x38>)
100008de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100008e2:	095b      	lsrs	r3, r3, #5
100008e4:	2001      	movs	r0, #1
100008e6:	fa00 f202 	lsl.w	r2, r0, r2
100008ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
100008ee:	bf00      	nop
100008f0:	370c      	adds	r7, #12
100008f2:	46bd      	mov	sp, r7
100008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
100008f8:	4770      	bx	lr
100008fa:	bf00      	nop
100008fc:	e000e100 	.word	0xe000e100

10000900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10000900:	b480      	push	{r7}
10000902:	b083      	sub	sp, #12
10000904:	af00      	add	r7, sp, #0
10000906:	4603      	mov	r3, r0
10000908:	6039      	str	r1, [r7, #0]
1000090a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
1000090c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000910:	2b00      	cmp	r3, #0
10000912:	db0a      	blt.n	1000092a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10000914:	683b      	ldr	r3, [r7, #0]
10000916:	b2da      	uxtb	r2, r3
10000918:	490c      	ldr	r1, [pc, #48]	; (1000094c <__NVIC_SetPriority+0x4c>)
1000091a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
1000091e:	0112      	lsls	r2, r2, #4
10000920:	b2d2      	uxtb	r2, r2
10000922:	440b      	add	r3, r1
10000924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
10000928:	e00a      	b.n	10000940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1000092a:	683b      	ldr	r3, [r7, #0]
1000092c:	b2da      	uxtb	r2, r3
1000092e:	4908      	ldr	r1, [pc, #32]	; (10000950 <__NVIC_SetPriority+0x50>)
10000930:	88fb      	ldrh	r3, [r7, #6]
10000932:	f003 030f 	and.w	r3, r3, #15
10000936:	3b04      	subs	r3, #4
10000938:	0112      	lsls	r2, r2, #4
1000093a:	b2d2      	uxtb	r2, r2
1000093c:	440b      	add	r3, r1
1000093e:	761a      	strb	r2, [r3, #24]
}
10000940:	bf00      	nop
10000942:	370c      	adds	r7, #12
10000944:	46bd      	mov	sp, r7
10000946:	f85d 7b04 	ldr.w	r7, [sp], #4
1000094a:	4770      	bx	lr
1000094c:	e000e100 	.word	0xe000e100
10000950:	e000ed00 	.word	0xe000ed00

10000954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
10000954:	b480      	push	{r7}
10000956:	b089      	sub	sp, #36	; 0x24
10000958:	af00      	add	r7, sp, #0
1000095a:	60f8      	str	r0, [r7, #12]
1000095c:	60b9      	str	r1, [r7, #8]
1000095e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
10000960:	68fb      	ldr	r3, [r7, #12]
10000962:	f003 0307 	and.w	r3, r3, #7
10000966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
10000968:	69fb      	ldr	r3, [r7, #28]
1000096a:	f1c3 0307 	rsb	r3, r3, #7
1000096e:	2b04      	cmp	r3, #4
10000970:	bf28      	it	cs
10000972:	2304      	movcs	r3, #4
10000974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
10000976:	69fb      	ldr	r3, [r7, #28]
10000978:	3304      	adds	r3, #4
1000097a:	2b06      	cmp	r3, #6
1000097c:	d902      	bls.n	10000984 <NVIC_EncodePriority+0x30>
1000097e:	69fb      	ldr	r3, [r7, #28]
10000980:	3b03      	subs	r3, #3
10000982:	e000      	b.n	10000986 <NVIC_EncodePriority+0x32>
10000984:	2300      	movs	r3, #0
10000986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10000988:	f04f 32ff 	mov.w	r2, #4294967295
1000098c:	69bb      	ldr	r3, [r7, #24]
1000098e:	fa02 f303 	lsl.w	r3, r2, r3
10000992:	43da      	mvns	r2, r3
10000994:	68bb      	ldr	r3, [r7, #8]
10000996:	401a      	ands	r2, r3
10000998:	697b      	ldr	r3, [r7, #20]
1000099a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
1000099c:	f04f 31ff 	mov.w	r1, #4294967295
100009a0:	697b      	ldr	r3, [r7, #20]
100009a2:	fa01 f303 	lsl.w	r3, r1, r3
100009a6:	43d9      	mvns	r1, r3
100009a8:	687b      	ldr	r3, [r7, #4]
100009aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
100009ac:	4313      	orrs	r3, r2
         );
}
100009ae:	4618      	mov	r0, r3
100009b0:	3724      	adds	r7, #36	; 0x24
100009b2:	46bd      	mov	sp, r7
100009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
100009b8:	4770      	bx	lr
	...

100009bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
100009bc:	b580      	push	{r7, lr}
100009be:	b082      	sub	sp, #8
100009c0:	af00      	add	r7, sp, #0
100009c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
100009c4:	687b      	ldr	r3, [r7, #4]
100009c6:	3b01      	subs	r3, #1
100009c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
100009cc:	d301      	bcc.n	100009d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
100009ce:	2301      	movs	r3, #1
100009d0:	e00f      	b.n	100009f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
100009d2:	4a0a      	ldr	r2, [pc, #40]	; (100009fc <SysTick_Config+0x40>)
100009d4:	687b      	ldr	r3, [r7, #4]
100009d6:	3b01      	subs	r3, #1
100009d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
100009da:	210f      	movs	r1, #15
100009dc:	f04f 30ff 	mov.w	r0, #4294967295
100009e0:	f7ff ff8e 	bl	10000900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
100009e4:	4b05      	ldr	r3, [pc, #20]	; (100009fc <SysTick_Config+0x40>)
100009e6:	2200      	movs	r2, #0
100009e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
100009ea:	4b04      	ldr	r3, [pc, #16]	; (100009fc <SysTick_Config+0x40>)
100009ec:	2207      	movs	r2, #7
100009ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
100009f0:	2300      	movs	r3, #0
}
100009f2:	4618      	mov	r0, r3
100009f4:	3708      	adds	r7, #8
100009f6:	46bd      	mov	sp, r7
100009f8:	bd80      	pop	{r7, pc}
100009fa:	bf00      	nop
100009fc:	e000e010 	.word	0xe000e010

10000a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10000a00:	b580      	push	{r7, lr}
10000a02:	b082      	sub	sp, #8
10000a04:	af00      	add	r7, sp, #0
10000a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
10000a08:	6878      	ldr	r0, [r7, #4]
10000a0a:	f7ff ff29 	bl	10000860 <__NVIC_SetPriorityGrouping>
}
10000a0e:	bf00      	nop
10000a10:	3708      	adds	r7, #8
10000a12:	46bd      	mov	sp, r7
10000a14:	bd80      	pop	{r7, pc}

10000a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10000a16:	b580      	push	{r7, lr}
10000a18:	b086      	sub	sp, #24
10000a1a:	af00      	add	r7, sp, #0
10000a1c:	4603      	mov	r3, r0
10000a1e:	60b9      	str	r1, [r7, #8]
10000a20:	607a      	str	r2, [r7, #4]
10000a22:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
10000a24:	2300      	movs	r3, #0
10000a26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
10000a28:	f7ff ff3e 	bl	100008a8 <__NVIC_GetPriorityGrouping>
10000a2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
10000a2e:	687a      	ldr	r2, [r7, #4]
10000a30:	68b9      	ldr	r1, [r7, #8]
10000a32:	6978      	ldr	r0, [r7, #20]
10000a34:	f7ff ff8e 	bl	10000954 <NVIC_EncodePriority>
10000a38:	4602      	mov	r2, r0
10000a3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
10000a3e:	4611      	mov	r1, r2
10000a40:	4618      	mov	r0, r3
10000a42:	f7ff ff5d 	bl	10000900 <__NVIC_SetPriority>
}
10000a46:	bf00      	nop
10000a48:	3718      	adds	r7, #24
10000a4a:	46bd      	mov	sp, r7
10000a4c:	bd80      	pop	{r7, pc}

10000a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10000a4e:	b580      	push	{r7, lr}
10000a50:	b082      	sub	sp, #8
10000a52:	af00      	add	r7, sp, #0
10000a54:	4603      	mov	r3, r0
10000a56:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10000a58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000a5c:	4618      	mov	r0, r3
10000a5e:	f7ff ff31 	bl	100008c4 <__NVIC_EnableIRQ>
}
10000a62:	bf00      	nop
10000a64:	3708      	adds	r7, #8
10000a66:	46bd      	mov	sp, r7
10000a68:	bd80      	pop	{r7, pc}

10000a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10000a6a:	b580      	push	{r7, lr}
10000a6c:	b082      	sub	sp, #8
10000a6e:	af00      	add	r7, sp, #0
10000a70:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10000a72:	6878      	ldr	r0, [r7, #4]
10000a74:	f7ff ffa2 	bl	100009bc <SysTick_Config>
10000a78:	4603      	mov	r3, r0
}
10000a7a:	4618      	mov	r0, r3
10000a7c:	3708      	adds	r7, #8
10000a7e:	46bd      	mov	sp, r7
10000a80:	bd80      	pop	{r7, pc}
	...

10000a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
10000a84:	b480      	push	{r7}
10000a86:	b089      	sub	sp, #36	; 0x24
10000a88:	af00      	add	r7, sp, #0
10000a8a:	6078      	str	r0, [r7, #4]
10000a8c:	6039      	str	r1, [r7, #0]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef * EXTI_CurrentCPU;

#if defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_C2; /* EXTI for CM4 CPU */
10000a8e:	4b8a      	ldr	r3, [pc, #552]	; (10000cb8 <HAL_GPIO_Init+0x234>)
10000a90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
10000a92:	2300      	movs	r3, #0
10000a94:	61fb      	str	r3, [r7, #28]
10000a96:	e191      	b.n	10000dbc <HAL_GPIO_Init+0x338>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
10000a98:	2201      	movs	r2, #1
10000a9a:	69fb      	ldr	r3, [r7, #28]
10000a9c:	fa02 f303 	lsl.w	r3, r2, r3
10000aa0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
10000aa2:	683b      	ldr	r3, [r7, #0]
10000aa4:	681b      	ldr	r3, [r3, #0]
10000aa6:	693a      	ldr	r2, [r7, #16]
10000aa8:	4013      	ands	r3, r2
10000aaa:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
10000aac:	68fa      	ldr	r2, [r7, #12]
10000aae:	693b      	ldr	r3, [r7, #16]
10000ab0:	429a      	cmp	r2, r3
10000ab2:	f040 8180 	bne.w	10000db6 <HAL_GPIO_Init+0x332>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10000ab6:	683b      	ldr	r3, [r7, #0]
10000ab8:	685b      	ldr	r3, [r3, #4]
10000aba:	2b02      	cmp	r3, #2
10000abc:	d003      	beq.n	10000ac6 <HAL_GPIO_Init+0x42>
10000abe:	683b      	ldr	r3, [r7, #0]
10000ac0:	685b      	ldr	r3, [r3, #4]
10000ac2:	2b12      	cmp	r3, #18
10000ac4:	d123      	bne.n	10000b0e <HAL_GPIO_Init+0x8a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
10000ac6:	69fb      	ldr	r3, [r7, #28]
10000ac8:	08da      	lsrs	r2, r3, #3
10000aca:	687b      	ldr	r3, [r7, #4]
10000acc:	3208      	adds	r2, #8
10000ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
10000ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
10000ad4:	69fb      	ldr	r3, [r7, #28]
10000ad6:	f003 0307 	and.w	r3, r3, #7
10000ada:	009b      	lsls	r3, r3, #2
10000adc:	220f      	movs	r2, #15
10000ade:	fa02 f303 	lsl.w	r3, r2, r3
10000ae2:	43db      	mvns	r3, r3
10000ae4:	69ba      	ldr	r2, [r7, #24]
10000ae6:	4013      	ands	r3, r2
10000ae8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
10000aea:	683b      	ldr	r3, [r7, #0]
10000aec:	691a      	ldr	r2, [r3, #16]
10000aee:	69fb      	ldr	r3, [r7, #28]
10000af0:	f003 0307 	and.w	r3, r3, #7
10000af4:	009b      	lsls	r3, r3, #2
10000af6:	fa02 f303 	lsl.w	r3, r2, r3
10000afa:	69ba      	ldr	r2, [r7, #24]
10000afc:	4313      	orrs	r3, r2
10000afe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
10000b00:	69fb      	ldr	r3, [r7, #28]
10000b02:	08da      	lsrs	r2, r3, #3
10000b04:	687b      	ldr	r3, [r7, #4]
10000b06:	3208      	adds	r2, #8
10000b08:	69b9      	ldr	r1, [r7, #24]
10000b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
10000b0e:	687b      	ldr	r3, [r7, #4]
10000b10:	681b      	ldr	r3, [r3, #0]
10000b12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
10000b14:	69fb      	ldr	r3, [r7, #28]
10000b16:	005b      	lsls	r3, r3, #1
10000b18:	2203      	movs	r2, #3
10000b1a:	fa02 f303 	lsl.w	r3, r2, r3
10000b1e:	43db      	mvns	r3, r3
10000b20:	69ba      	ldr	r2, [r7, #24]
10000b22:	4013      	ands	r3, r2
10000b24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
10000b26:	683b      	ldr	r3, [r7, #0]
10000b28:	685b      	ldr	r3, [r3, #4]
10000b2a:	f003 0203 	and.w	r2, r3, #3
10000b2e:	69fb      	ldr	r3, [r7, #28]
10000b30:	005b      	lsls	r3, r3, #1
10000b32:	fa02 f303 	lsl.w	r3, r2, r3
10000b36:	69ba      	ldr	r2, [r7, #24]
10000b38:	4313      	orrs	r3, r2
10000b3a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
10000b3c:	687b      	ldr	r3, [r7, #4]
10000b3e:	69ba      	ldr	r2, [r7, #24]
10000b40:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10000b42:	683b      	ldr	r3, [r7, #0]
10000b44:	685b      	ldr	r3, [r3, #4]
10000b46:	2b01      	cmp	r3, #1
10000b48:	d00b      	beq.n	10000b62 <HAL_GPIO_Init+0xde>
10000b4a:	683b      	ldr	r3, [r7, #0]
10000b4c:	685b      	ldr	r3, [r3, #4]
10000b4e:	2b02      	cmp	r3, #2
10000b50:	d007      	beq.n	10000b62 <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10000b52:	683b      	ldr	r3, [r7, #0]
10000b54:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10000b56:	2b11      	cmp	r3, #17
10000b58:	d003      	beq.n	10000b62 <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10000b5a:	683b      	ldr	r3, [r7, #0]
10000b5c:	685b      	ldr	r3, [r3, #4]
10000b5e:	2b12      	cmp	r3, #18
10000b60:	d130      	bne.n	10000bc4 <HAL_GPIO_Init+0x140>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10000b62:	687b      	ldr	r3, [r7, #4]
10000b64:	689b      	ldr	r3, [r3, #8]
10000b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
10000b68:	69fb      	ldr	r3, [r7, #28]
10000b6a:	005b      	lsls	r3, r3, #1
10000b6c:	2203      	movs	r2, #3
10000b6e:	fa02 f303 	lsl.w	r3, r2, r3
10000b72:	43db      	mvns	r3, r3
10000b74:	69ba      	ldr	r2, [r7, #24]
10000b76:	4013      	ands	r3, r2
10000b78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
10000b7a:	683b      	ldr	r3, [r7, #0]
10000b7c:	68da      	ldr	r2, [r3, #12]
10000b7e:	69fb      	ldr	r3, [r7, #28]
10000b80:	005b      	lsls	r3, r3, #1
10000b82:	fa02 f303 	lsl.w	r3, r2, r3
10000b86:	69ba      	ldr	r2, [r7, #24]
10000b88:	4313      	orrs	r3, r2
10000b8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
10000b8c:	687b      	ldr	r3, [r7, #4]
10000b8e:	69ba      	ldr	r2, [r7, #24]
10000b90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
10000b92:	687b      	ldr	r3, [r7, #4]
10000b94:	685b      	ldr	r3, [r3, #4]
10000b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10000b98:	2201      	movs	r2, #1
10000b9a:	69fb      	ldr	r3, [r7, #28]
10000b9c:	fa02 f303 	lsl.w	r3, r2, r3
10000ba0:	43db      	mvns	r3, r3
10000ba2:	69ba      	ldr	r2, [r7, #24]
10000ba4:	4013      	ands	r3, r2
10000ba6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
10000ba8:	683b      	ldr	r3, [r7, #0]
10000baa:	685b      	ldr	r3, [r3, #4]
10000bac:	091b      	lsrs	r3, r3, #4
10000bae:	f003 0201 	and.w	r2, r3, #1
10000bb2:	69fb      	ldr	r3, [r7, #28]
10000bb4:	fa02 f303 	lsl.w	r3, r2, r3
10000bb8:	69ba      	ldr	r2, [r7, #24]
10000bba:	4313      	orrs	r3, r2
10000bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
10000bbe:	687b      	ldr	r3, [r7, #4]
10000bc0:	69ba      	ldr	r2, [r7, #24]
10000bc2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
10000bc4:	687b      	ldr	r3, [r7, #4]
10000bc6:	68db      	ldr	r3, [r3, #12]
10000bc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
10000bca:	69fb      	ldr	r3, [r7, #28]
10000bcc:	005b      	lsls	r3, r3, #1
10000bce:	2203      	movs	r2, #3
10000bd0:	fa02 f303 	lsl.w	r3, r2, r3
10000bd4:	43db      	mvns	r3, r3
10000bd6:	69ba      	ldr	r2, [r7, #24]
10000bd8:	4013      	ands	r3, r2
10000bda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
10000bdc:	683b      	ldr	r3, [r7, #0]
10000bde:	689a      	ldr	r2, [r3, #8]
10000be0:	69fb      	ldr	r3, [r7, #28]
10000be2:	005b      	lsls	r3, r3, #1
10000be4:	fa02 f303 	lsl.w	r3, r2, r3
10000be8:	69ba      	ldr	r2, [r7, #24]
10000bea:	4313      	orrs	r3, r2
10000bec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
10000bee:	687b      	ldr	r3, [r7, #4]
10000bf0:	69ba      	ldr	r2, [r7, #24]
10000bf2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
10000bf4:	683b      	ldr	r3, [r7, #0]
10000bf6:	685b      	ldr	r3, [r3, #4]
10000bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
10000bfc:	2b00      	cmp	r3, #0
10000bfe:	f000 80da 	beq.w	10000db6 <HAL_GPIO_Init+0x332>
      {
        temp = EXTI->EXTICR[position >> 2U];
10000c02:	4a2e      	ldr	r2, [pc, #184]	; (10000cbc <HAL_GPIO_Init+0x238>)
10000c04:	69fb      	ldr	r3, [r7, #28]
10000c06:	089b      	lsrs	r3, r3, #2
10000c08:	3318      	adds	r3, #24
10000c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10000c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFFU << (8U * (position & 0x03U)));
10000c10:	69fb      	ldr	r3, [r7, #28]
10000c12:	f003 0303 	and.w	r3, r3, #3
10000c16:	00db      	lsls	r3, r3, #3
10000c18:	22ff      	movs	r2, #255	; 0xff
10000c1a:	fa02 f303 	lsl.w	r3, r2, r3
10000c1e:	43db      	mvns	r3, r3
10000c20:	69ba      	ldr	r2, [r7, #24]
10000c22:	4013      	ands	r3, r2
10000c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
10000c26:	687b      	ldr	r3, [r7, #4]
10000c28:	4a25      	ldr	r2, [pc, #148]	; (10000cc0 <HAL_GPIO_Init+0x23c>)
10000c2a:	4293      	cmp	r3, r2
10000c2c:	d05e      	beq.n	10000cec <HAL_GPIO_Init+0x268>
10000c2e:	687b      	ldr	r3, [r7, #4]
10000c30:	4a24      	ldr	r2, [pc, #144]	; (10000cc4 <HAL_GPIO_Init+0x240>)
10000c32:	4293      	cmp	r3, r2
10000c34:	d03d      	beq.n	10000cb2 <HAL_GPIO_Init+0x22e>
10000c36:	687b      	ldr	r3, [r7, #4]
10000c38:	4a23      	ldr	r2, [pc, #140]	; (10000cc8 <HAL_GPIO_Init+0x244>)
10000c3a:	4293      	cmp	r3, r2
10000c3c:	d037      	beq.n	10000cae <HAL_GPIO_Init+0x22a>
10000c3e:	687b      	ldr	r3, [r7, #4]
10000c40:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
10000c44:	d031      	beq.n	10000caa <HAL_GPIO_Init+0x226>
10000c46:	687b      	ldr	r3, [r7, #4]
10000c48:	4a20      	ldr	r2, [pc, #128]	; (10000ccc <HAL_GPIO_Init+0x248>)
10000c4a:	4293      	cmp	r3, r2
10000c4c:	d02b      	beq.n	10000ca6 <HAL_GPIO_Init+0x222>
10000c4e:	687b      	ldr	r3, [r7, #4]
10000c50:	4a1f      	ldr	r2, [pc, #124]	; (10000cd0 <HAL_GPIO_Init+0x24c>)
10000c52:	4293      	cmp	r3, r2
10000c54:	d025      	beq.n	10000ca2 <HAL_GPIO_Init+0x21e>
10000c56:	687b      	ldr	r3, [r7, #4]
10000c58:	4a1e      	ldr	r2, [pc, #120]	; (10000cd4 <HAL_GPIO_Init+0x250>)
10000c5a:	4293      	cmp	r3, r2
10000c5c:	d01f      	beq.n	10000c9e <HAL_GPIO_Init+0x21a>
10000c5e:	687b      	ldr	r3, [r7, #4]
10000c60:	4a1d      	ldr	r2, [pc, #116]	; (10000cd8 <HAL_GPIO_Init+0x254>)
10000c62:	4293      	cmp	r3, r2
10000c64:	d019      	beq.n	10000c9a <HAL_GPIO_Init+0x216>
10000c66:	687b      	ldr	r3, [r7, #4]
10000c68:	4a1c      	ldr	r2, [pc, #112]	; (10000cdc <HAL_GPIO_Init+0x258>)
10000c6a:	4293      	cmp	r3, r2
10000c6c:	d013      	beq.n	10000c96 <HAL_GPIO_Init+0x212>
10000c6e:	687b      	ldr	r3, [r7, #4]
10000c70:	4a1b      	ldr	r2, [pc, #108]	; (10000ce0 <HAL_GPIO_Init+0x25c>)
10000c72:	4293      	cmp	r3, r2
10000c74:	d00d      	beq.n	10000c92 <HAL_GPIO_Init+0x20e>
10000c76:	687b      	ldr	r3, [r7, #4]
10000c78:	4a1a      	ldr	r2, [pc, #104]	; (10000ce4 <HAL_GPIO_Init+0x260>)
10000c7a:	4293      	cmp	r3, r2
10000c7c:	d007      	beq.n	10000c8e <HAL_GPIO_Init+0x20a>
10000c7e:	687b      	ldr	r3, [r7, #4]
10000c80:	4a19      	ldr	r2, [pc, #100]	; (10000ce8 <HAL_GPIO_Init+0x264>)
10000c82:	4293      	cmp	r3, r2
10000c84:	d101      	bne.n	10000c8a <HAL_GPIO_Init+0x206>
10000c86:	230b      	movs	r3, #11
10000c88:	e031      	b.n	10000cee <HAL_GPIO_Init+0x26a>
10000c8a:	2319      	movs	r3, #25
10000c8c:	e02f      	b.n	10000cee <HAL_GPIO_Init+0x26a>
10000c8e:	230a      	movs	r3, #10
10000c90:	e02d      	b.n	10000cee <HAL_GPIO_Init+0x26a>
10000c92:	2309      	movs	r3, #9
10000c94:	e02b      	b.n	10000cee <HAL_GPIO_Init+0x26a>
10000c96:	2308      	movs	r3, #8
10000c98:	e029      	b.n	10000cee <HAL_GPIO_Init+0x26a>
10000c9a:	2307      	movs	r3, #7
10000c9c:	e027      	b.n	10000cee <HAL_GPIO_Init+0x26a>
10000c9e:	2306      	movs	r3, #6
10000ca0:	e025      	b.n	10000cee <HAL_GPIO_Init+0x26a>
10000ca2:	2305      	movs	r3, #5
10000ca4:	e023      	b.n	10000cee <HAL_GPIO_Init+0x26a>
10000ca6:	2304      	movs	r3, #4
10000ca8:	e021      	b.n	10000cee <HAL_GPIO_Init+0x26a>
10000caa:	2303      	movs	r3, #3
10000cac:	e01f      	b.n	10000cee <HAL_GPIO_Init+0x26a>
10000cae:	2302      	movs	r3, #2
10000cb0:	e01d      	b.n	10000cee <HAL_GPIO_Init+0x26a>
10000cb2:	2301      	movs	r3, #1
10000cb4:	e01b      	b.n	10000cee <HAL_GPIO_Init+0x26a>
10000cb6:	bf00      	nop
10000cb8:	5000d0c0 	.word	0x5000d0c0
10000cbc:	5000d000 	.word	0x5000d000
10000cc0:	50002000 	.word	0x50002000
10000cc4:	50003000 	.word	0x50003000
10000cc8:	50004000 	.word	0x50004000
10000ccc:	50006000 	.word	0x50006000
10000cd0:	50007000 	.word	0x50007000
10000cd4:	50008000 	.word	0x50008000
10000cd8:	50009000 	.word	0x50009000
10000cdc:	5000a000 	.word	0x5000a000
10000ce0:	5000b000 	.word	0x5000b000
10000ce4:	5000c000 	.word	0x5000c000
10000ce8:	54004000 	.word	0x54004000
10000cec:	2300      	movs	r3, #0
10000cee:	69fa      	ldr	r2, [r7, #28]
10000cf0:	f002 0203 	and.w	r2, r2, #3
10000cf4:	00d2      	lsls	r2, r2, #3
10000cf6:	4093      	lsls	r3, r2
10000cf8:	461a      	mov	r2, r3
10000cfa:	69bb      	ldr	r3, [r7, #24]
10000cfc:	4313      	orrs	r3, r2
10000cfe:	61bb      	str	r3, [r7, #24]
        EXTI->EXTICR[position >> 2U] = temp;
10000d00:	4934      	ldr	r1, [pc, #208]	; (10000dd4 <HAL_GPIO_Init+0x350>)
10000d02:	69fb      	ldr	r3, [r7, #28]
10000d04:	089b      	lsrs	r3, r3, #2
10000d06:	3318      	adds	r3, #24
10000d08:	69ba      	ldr	r2, [r7, #24]
10000d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
10000d0e:	697b      	ldr	r3, [r7, #20]
10000d10:	681b      	ldr	r3, [r3, #0]
10000d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000d14:	68fb      	ldr	r3, [r7, #12]
10000d16:	43db      	mvns	r3, r3
10000d18:	69ba      	ldr	r2, [r7, #24]
10000d1a:	4013      	ands	r3, r2
10000d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
10000d1e:	683b      	ldr	r3, [r7, #0]
10000d20:	685b      	ldr	r3, [r3, #4]
10000d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
10000d26:	2b00      	cmp	r3, #0
10000d28:	d003      	beq.n	10000d32 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
10000d2a:	69ba      	ldr	r2, [r7, #24]
10000d2c:	68fb      	ldr	r3, [r7, #12]
10000d2e:	4313      	orrs	r3, r2
10000d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
10000d32:	697b      	ldr	r3, [r7, #20]
10000d34:	69ba      	ldr	r2, [r7, #24]
10000d36:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
10000d38:	697b      	ldr	r3, [r7, #20]
10000d3a:	685b      	ldr	r3, [r3, #4]
10000d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000d3e:	68fb      	ldr	r3, [r7, #12]
10000d40:	43db      	mvns	r3, r3
10000d42:	69ba      	ldr	r2, [r7, #24]
10000d44:	4013      	ands	r3, r2
10000d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
10000d48:	683b      	ldr	r3, [r7, #0]
10000d4a:	685b      	ldr	r3, [r3, #4]
10000d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
10000d50:	2b00      	cmp	r3, #0
10000d52:	d003      	beq.n	10000d5c <HAL_GPIO_Init+0x2d8>
        {
          temp |= iocurrent;
10000d54:	69ba      	ldr	r2, [r7, #24]
10000d56:	68fb      	ldr	r3, [r7, #12]
10000d58:	4313      	orrs	r3, r2
10000d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
10000d5c:	697b      	ldr	r3, [r7, #20]
10000d5e:	69ba      	ldr	r2, [r7, #24]
10000d60:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
10000d62:	4b1c      	ldr	r3, [pc, #112]	; (10000dd4 <HAL_GPIO_Init+0x350>)
10000d64:	681b      	ldr	r3, [r3, #0]
10000d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000d68:	68fb      	ldr	r3, [r7, #12]
10000d6a:	43db      	mvns	r3, r3
10000d6c:	69ba      	ldr	r2, [r7, #24]
10000d6e:	4013      	ands	r3, r2
10000d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
10000d72:	683b      	ldr	r3, [r7, #0]
10000d74:	685b      	ldr	r3, [r3, #4]
10000d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
10000d7a:	2b00      	cmp	r3, #0
10000d7c:	d003      	beq.n	10000d86 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
10000d7e:	69ba      	ldr	r2, [r7, #24]
10000d80:	68fb      	ldr	r3, [r7, #12]
10000d82:	4313      	orrs	r3, r2
10000d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
10000d86:	4a13      	ldr	r2, [pc, #76]	; (10000dd4 <HAL_GPIO_Init+0x350>)
10000d88:	69bb      	ldr	r3, [r7, #24]
10000d8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
10000d8c:	4b11      	ldr	r3, [pc, #68]	; (10000dd4 <HAL_GPIO_Init+0x350>)
10000d8e:	685b      	ldr	r3, [r3, #4]
10000d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000d92:	68fb      	ldr	r3, [r7, #12]
10000d94:	43db      	mvns	r3, r3
10000d96:	69ba      	ldr	r2, [r7, #24]
10000d98:	4013      	ands	r3, r2
10000d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
10000d9c:	683b      	ldr	r3, [r7, #0]
10000d9e:	685b      	ldr	r3, [r3, #4]
10000da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
10000da4:	2b00      	cmp	r3, #0
10000da6:	d003      	beq.n	10000db0 <HAL_GPIO_Init+0x32c>
        {
          temp |= iocurrent;
10000da8:	69ba      	ldr	r2, [r7, #24]
10000daa:	68fb      	ldr	r3, [r7, #12]
10000dac:	4313      	orrs	r3, r2
10000dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
10000db0:	4a08      	ldr	r2, [pc, #32]	; (10000dd4 <HAL_GPIO_Init+0x350>)
10000db2:	69bb      	ldr	r3, [r7, #24]
10000db4:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
10000db6:	69fb      	ldr	r3, [r7, #28]
10000db8:	3301      	adds	r3, #1
10000dba:	61fb      	str	r3, [r7, #28]
10000dbc:	69fb      	ldr	r3, [r7, #28]
10000dbe:	2b0f      	cmp	r3, #15
10000dc0:	f67f ae6a 	bls.w	10000a98 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
10000dc4:	bf00      	nop
10000dc6:	bf00      	nop
10000dc8:	3724      	adds	r7, #36	; 0x24
10000dca:	46bd      	mov	sp, r7
10000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
10000dd0:	4770      	bx	lr
10000dd2:	bf00      	nop
10000dd4:	5000d000 	.word	0x5000d000

10000dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
10000dd8:	b480      	push	{r7}
10000dda:	b083      	sub	sp, #12
10000ddc:	af00      	add	r7, sp, #0
10000dde:	6078      	str	r0, [r7, #4]
10000de0:	460b      	mov	r3, r1
10000de2:	807b      	strh	r3, [r7, #2]
10000de4:	4613      	mov	r3, r2
10000de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
10000de8:	787b      	ldrb	r3, [r7, #1]
10000dea:	2b00      	cmp	r3, #0
10000dec:	d003      	beq.n	10000df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
10000dee:	887a      	ldrh	r2, [r7, #2]
10000df0:	687b      	ldr	r3, [r7, #4]
10000df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
10000df4:	e003      	b.n	10000dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
10000df6:	887b      	ldrh	r3, [r7, #2]
10000df8:	041a      	lsls	r2, r3, #16
10000dfa:	687b      	ldr	r3, [r7, #4]
10000dfc:	619a      	str	r2, [r3, #24]
}
10000dfe:	bf00      	nop
10000e00:	370c      	adds	r7, #12
10000e02:	46bd      	mov	sp, r7
10000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
10000e08:	4770      	bx	lr
	...

10000e0c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10000e0c:	b580      	push	{r7, lr}
10000e0e:	b084      	sub	sp, #16
10000e10:	af00      	add	r7, sp, #0
10000e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
10000e14:	2300      	movs	r3, #0
10000e16:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10000e18:	687b      	ldr	r3, [r7, #4]
10000e1a:	2b00      	cmp	r3, #0
10000e1c:	d101      	bne.n	10000e22 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
10000e1e:	2301      	movs	r3, #1
10000e20:	e320      	b.n	10001464 <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10000e22:	687b      	ldr	r3, [r7, #4]
10000e24:	681b      	ldr	r3, [r3, #0]
10000e26:	f003 0301 	and.w	r3, r3, #1
10000e2a:	2b00      	cmp	r3, #0
10000e2c:	f000 8081 	beq.w	10000f32 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
10000e30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e34:	6a1b      	ldr	r3, [r3, #32]
10000e36:	f003 0303 	and.w	r3, r3, #3
10000e3a:	2b01      	cmp	r3, #1
10000e3c:	d107      	bne.n	10000e4e <HAL_RCC_OscConfig+0x42>
10000e3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e42:	6a1b      	ldr	r3, [r3, #32]
10000e44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000e48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000e4c:	d054      	beq.n	10000ef8 <HAL_RCC_OscConfig+0xec>
10000e4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000e54:	f003 0307 	and.w	r3, r3, #7
10000e58:	2b01      	cmp	r3, #1
10000e5a:	d107      	bne.n	10000e6c <HAL_RCC_OscConfig+0x60>
10000e5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000e62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000e66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000e6a:	d045      	beq.n	10000ef8 <HAL_RCC_OscConfig+0xec>
10000e6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000e72:	f003 0303 	and.w	r3, r3, #3
10000e76:	2b01      	cmp	r3, #1
10000e78:	d107      	bne.n	10000e8a <HAL_RCC_OscConfig+0x7e>
10000e7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000e80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000e84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000e88:	d036      	beq.n	10000ef8 <HAL_RCC_OscConfig+0xec>
10000e8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000e90:	f003 0303 	and.w	r3, r3, #3
10000e94:	2b01      	cmp	r3, #1
10000e96:	d10f      	bne.n	10000eb8 <HAL_RCC_OscConfig+0xac>
10000e98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000ea0:	f003 0302 	and.w	r3, r3, #2
10000ea4:	2b02      	cmp	r3, #2
10000ea6:	d027      	beq.n	10000ef8 <HAL_RCC_OscConfig+0xec>
10000ea8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10000eb0:	f003 0302 	and.w	r3, r3, #2
10000eb4:	2b02      	cmp	r3, #2
10000eb6:	d01f      	beq.n	10000ef8 <HAL_RCC_OscConfig+0xec>
10000eb8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ebc:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000ec0:	f003 0303 	and.w	r3, r3, #3
10000ec4:	2b01      	cmp	r3, #1
10000ec6:	d107      	bne.n	10000ed8 <HAL_RCC_OscConfig+0xcc>
10000ec8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ecc:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000ed0:	f003 0302 	and.w	r3, r3, #2
10000ed4:	2b02      	cmp	r3, #2
10000ed6:	d00f      	beq.n	10000ef8 <HAL_RCC_OscConfig+0xec>
10000ed8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000edc:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000ee0:	f003 0303 	and.w	r3, r3, #3
10000ee4:	2b01      	cmp	r3, #1
10000ee6:	d117      	bne.n	10000f18 <HAL_RCC_OscConfig+0x10c>
10000ee8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000eec:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000ef0:	f003 0302 	and.w	r3, r3, #2
10000ef4:	2b02      	cmp	r3, #2
10000ef6:	d10f      	bne.n	10000f18 <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10000ef8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000efc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
10000f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10000f08:	d112      	bne.n	10000f30 <HAL_RCC_OscConfig+0x124>
10000f0a:	687b      	ldr	r3, [r7, #4]
10000f0c:	685b      	ldr	r3, [r3, #4]
10000f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10000f12:	d00d      	beq.n	10000f30 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
10000f14:	2301      	movs	r3, #1
10000f16:	e2a5      	b.n	10001464 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
10000f18:	687b      	ldr	r3, [r7, #4]
10000f1a:	685b      	ldr	r3, [r3, #4]
10000f1c:	4618      	mov	r0, r3
10000f1e:	f000 faa7 	bl	10001470 <HAL_RCC_HSEConfig>
10000f22:	4603      	mov	r3, r0
10000f24:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
10000f26:	7bfb      	ldrb	r3, [r7, #15]
10000f28:	2b00      	cmp	r3, #0
10000f2a:	d002      	beq.n	10000f32 <HAL_RCC_OscConfig+0x126>
      {
        return result;
10000f2c:	7bfb      	ldrb	r3, [r7, #15]
10000f2e:	e299      	b.n	10001464 <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10000f30:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10000f32:	687b      	ldr	r3, [r7, #4]
10000f34:	681b      	ldr	r3, [r3, #0]
10000f36:	f003 0302 	and.w	r3, r3, #2
10000f3a:	2b00      	cmp	r3, #0
10000f3c:	f000 814e 	beq.w	100011dc <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
10000f40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f44:	6a1b      	ldr	r3, [r3, #32]
10000f46:	f003 0303 	and.w	r3, r3, #3
10000f4a:	2b00      	cmp	r3, #0
10000f4c:	d107      	bne.n	10000f5e <HAL_RCC_OscConfig+0x152>
10000f4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f52:	6a1b      	ldr	r3, [r3, #32]
10000f54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000f58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000f5c:	d055      	beq.n	1000100a <HAL_RCC_OscConfig+0x1fe>
10000f5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000f64:	f003 0307 	and.w	r3, r3, #7
10000f68:	2b00      	cmp	r3, #0
10000f6a:	d107      	bne.n	10000f7c <HAL_RCC_OscConfig+0x170>
10000f6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000f72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000f76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000f7a:	d046      	beq.n	1000100a <HAL_RCC_OscConfig+0x1fe>
10000f7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000f82:	f003 0303 	and.w	r3, r3, #3
10000f86:	2b00      	cmp	r3, #0
10000f88:	d107      	bne.n	10000f9a <HAL_RCC_OscConfig+0x18e>
10000f8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000f90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000f94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000f98:	d037      	beq.n	1000100a <HAL_RCC_OscConfig+0x1fe>
10000f9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000fa0:	f003 0303 	and.w	r3, r3, #3
10000fa4:	2b00      	cmp	r3, #0
10000fa6:	d10f      	bne.n	10000fc8 <HAL_RCC_OscConfig+0x1bc>
10000fa8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000fb0:	f003 0302 	and.w	r3, r3, #2
10000fb4:	2b02      	cmp	r3, #2
10000fb6:	d028      	beq.n	1000100a <HAL_RCC_OscConfig+0x1fe>
10000fb8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10000fc0:	f003 0302 	and.w	r3, r3, #2
10000fc4:	2b02      	cmp	r3, #2
10000fc6:	d020      	beq.n	1000100a <HAL_RCC_OscConfig+0x1fe>
10000fc8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fcc:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000fd0:	f003 0303 	and.w	r3, r3, #3
10000fd4:	2b00      	cmp	r3, #0
10000fd6:	d107      	bne.n	10000fe8 <HAL_RCC_OscConfig+0x1dc>
10000fd8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fdc:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000fe0:	f003 0302 	and.w	r3, r3, #2
10000fe4:	2b02      	cmp	r3, #2
10000fe6:	d010      	beq.n	1000100a <HAL_RCC_OscConfig+0x1fe>
10000fe8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fec:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000ff0:	f003 0303 	and.w	r3, r3, #3
10000ff4:	2b00      	cmp	r3, #0
10000ff6:	f040 8088 	bne.w	1000110a <HAL_RCC_OscConfig+0x2fe>
10000ffa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ffe:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10001002:	f003 0302 	and.w	r3, r3, #2
10001006:	2b02      	cmp	r3, #2
10001008:	d17f      	bne.n	1000110a <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
1000100a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000100e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001012:	f003 0301 	and.w	r3, r3, #1
10001016:	2b01      	cmp	r3, #1
10001018:	d105      	bne.n	10001026 <HAL_RCC_OscConfig+0x21a>
1000101a:	687b      	ldr	r3, [r7, #4]
1000101c:	68db      	ldr	r3, [r3, #12]
1000101e:	2b01      	cmp	r3, #1
10001020:	d001      	beq.n	10001026 <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
10001022:	2301      	movs	r3, #1
10001024:	e21e      	b.n	10001464 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10001026:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000102a:	699b      	ldr	r3, [r3, #24]
1000102c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
10001030:	687b      	ldr	r3, [r7, #4]
10001032:	691b      	ldr	r3, [r3, #16]
10001034:	021b      	lsls	r3, r3, #8
10001036:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000103a:	4313      	orrs	r3, r2
1000103c:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
1000103e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001044:	f003 0303 	and.w	r3, r3, #3
10001048:	2b00      	cmp	r3, #0
1000104a:	d10f      	bne.n	1000106c <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
1000104c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001050:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001054:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10001058:	2b02      	cmp	r3, #2
1000105a:	d047      	beq.n	100010ec <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
1000105c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001064:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10001068:	2b02      	cmp	r3, #2
1000106a:	d03f      	beq.n	100010ec <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
1000106c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001070:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10001074:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10001078:	2b00      	cmp	r3, #0
1000107a:	d107      	bne.n	1000108c <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
1000107c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001080:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001084:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10001088:	2b02      	cmp	r3, #2
1000108a:	d02f      	beq.n	100010ec <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
1000108c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001090:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10001094:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10001098:	2b00      	cmp	r3, #0
1000109a:	d107      	bne.n	100010ac <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
1000109c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100010a0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100010a4:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
100010a8:	2b02      	cmp	r3, #2
100010aa:	d01f      	beq.n	100010ec <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
100010ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100010b0:	699b      	ldr	r3, [r3, #24]
100010b2:	f023 0203 	bic.w	r2, r3, #3
100010b6:	687b      	ldr	r3, [r7, #4]
100010b8:	695b      	ldr	r3, [r3, #20]
100010ba:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100010be:	4313      	orrs	r3, r2
100010c0:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
100010c2:	f7ff fb9d 	bl	10000800 <HAL_GetTick>
100010c6:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
100010c8:	e008      	b.n	100010dc <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
100010ca:	f7ff fb99 	bl	10000800 <HAL_GetTick>
100010ce:	4602      	mov	r2, r0
100010d0:	68bb      	ldr	r3, [r7, #8]
100010d2:	1ad3      	subs	r3, r2, r3
100010d4:	2b64      	cmp	r3, #100	; 0x64
100010d6:	d901      	bls.n	100010dc <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
100010d8:	2303      	movs	r3, #3
100010da:	e1c3      	b.n	10001464 <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
100010dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100010e0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100010e4:	f003 0304 	and.w	r3, r3, #4
100010e8:	2b04      	cmp	r3, #4
100010ea:	d1ee      	bne.n	100010ca <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
100010ec:	f001 f809 	bl	10002102 <HAL_RCC_GetSystemCoreClockFreq>
100010f0:	4603      	mov	r3, r0
100010f2:	4ab3      	ldr	r2, [pc, #716]	; (100013c0 <HAL_RCC_OscConfig+0x5b4>)
100010f4:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
100010f6:	4bb3      	ldr	r3, [pc, #716]	; (100013c4 <HAL_RCC_OscConfig+0x5b8>)
100010f8:	681b      	ldr	r3, [r3, #0]
100010fa:	4618      	mov	r0, r3
100010fc:	f7ff fb36 	bl	1000076c <HAL_InitTick>
10001100:	4603      	mov	r3, r0
10001102:	2b00      	cmp	r3, #0
10001104:	d069      	beq.n	100011da <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
10001106:	2301      	movs	r3, #1
10001108:	e1ac      	b.n	10001464 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
1000110a:	687b      	ldr	r3, [r7, #4]
1000110c:	68db      	ldr	r3, [r3, #12]
1000110e:	2b00      	cmp	r3, #0
10001110:	d049      	beq.n	100011a6 <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
10001112:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001116:	68db      	ldr	r3, [r3, #12]
10001118:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000111c:	f043 0301 	orr.w	r3, r3, #1
10001120:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001122:	f7ff fb6d 	bl	10000800 <HAL_GetTick>
10001126:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001128:	e008      	b.n	1000113c <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000112a:	f7ff fb69 	bl	10000800 <HAL_GetTick>
1000112e:	4602      	mov	r2, r0
10001130:	68bb      	ldr	r3, [r7, #8]
10001132:	1ad3      	subs	r3, r2, r3
10001134:	2b64      	cmp	r3, #100	; 0x64
10001136:	d901      	bls.n	1000113c <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
10001138:	2303      	movs	r3, #3
1000113a:	e193      	b.n	10001464 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
1000113c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001140:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001144:	f003 0301 	and.w	r3, r3, #1
10001148:	2b01      	cmp	r3, #1
1000114a:	d1ee      	bne.n	1000112a <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
1000114c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001150:	699b      	ldr	r3, [r3, #24]
10001152:	f023 0203 	bic.w	r2, r3, #3
10001156:	687b      	ldr	r3, [r7, #4]
10001158:	695b      	ldr	r3, [r3, #20]
1000115a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000115e:	4313      	orrs	r3, r2
10001160:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001162:	f7ff fb4d 	bl	10000800 <HAL_GetTick>
10001166:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10001168:	e008      	b.n	1000117c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000116a:	f7ff fb49 	bl	10000800 <HAL_GetTick>
1000116e:	4602      	mov	r2, r0
10001170:	68bb      	ldr	r3, [r7, #8]
10001172:	1ad3      	subs	r3, r2, r3
10001174:	2b64      	cmp	r3, #100	; 0x64
10001176:	d901      	bls.n	1000117c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
10001178:	2303      	movs	r3, #3
1000117a:	e173      	b.n	10001464 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
1000117c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001180:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001184:	f003 0304 	and.w	r3, r3, #4
10001188:	2b04      	cmp	r3, #4
1000118a:	d1ee      	bne.n	1000116a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
1000118c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001190:	699b      	ldr	r3, [r3, #24]
10001192:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
10001196:	687b      	ldr	r3, [r7, #4]
10001198:	691b      	ldr	r3, [r3, #16]
1000119a:	021b      	lsls	r3, r3, #8
1000119c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100011a0:	4313      	orrs	r3, r2
100011a2:	618b      	str	r3, [r1, #24]
100011a4:	e01a      	b.n	100011dc <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
100011a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011aa:	2201      	movs	r2, #1
100011ac:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100011ae:	f7ff fb27 	bl	10000800 <HAL_GetTick>
100011b2:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
100011b4:	e008      	b.n	100011c8 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
100011b6:	f7ff fb23 	bl	10000800 <HAL_GetTick>
100011ba:	4602      	mov	r2, r0
100011bc:	68bb      	ldr	r3, [r7, #8]
100011be:	1ad3      	subs	r3, r2, r3
100011c0:	2b64      	cmp	r3, #100	; 0x64
100011c2:	d901      	bls.n	100011c8 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
100011c4:	2303      	movs	r3, #3
100011c6:	e14d      	b.n	10001464 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
100011c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011cc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100011d0:	f003 0301 	and.w	r3, r3, #1
100011d4:	2b01      	cmp	r3, #1
100011d6:	d0ee      	beq.n	100011b6 <HAL_RCC_OscConfig+0x3aa>
100011d8:	e000      	b.n	100011dc <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
100011da:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
100011dc:	687b      	ldr	r3, [r7, #4]
100011de:	681b      	ldr	r3, [r3, #0]
100011e0:	f003 0310 	and.w	r3, r3, #16
100011e4:	2b00      	cmp	r3, #0
100011e6:	f000 8091 	beq.w	1000130c <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
100011ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011ee:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
100011f2:	f003 0303 	and.w	r3, r3, #3
100011f6:	2b02      	cmp	r3, #2
100011f8:	d107      	bne.n	1000120a <HAL_RCC_OscConfig+0x3fe>
100011fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011fe:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001202:	f003 0302 	and.w	r3, r3, #2
10001206:	2b02      	cmp	r3, #2
10001208:	d01e      	beq.n	10001248 <HAL_RCC_OscConfig+0x43c>
1000120a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000120e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001210:	f003 0303 	and.w	r3, r3, #3
10001214:	2b02      	cmp	r3, #2
10001216:	d107      	bne.n	10001228 <HAL_RCC_OscConfig+0x41c>
10001218:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000121c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000121e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001222:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001226:	d00f      	beq.n	10001248 <HAL_RCC_OscConfig+0x43c>
10001228:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000122c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10001230:	f003 0303 	and.w	r3, r3, #3
10001234:	2b02      	cmp	r3, #2
10001236:	d122      	bne.n	1000127e <HAL_RCC_OscConfig+0x472>
10001238:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000123c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10001240:	f003 0302 	and.w	r3, r3, #2
10001244:	2b02      	cmp	r3, #2
10001246:	d11a      	bne.n	1000127e <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10001248:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000124c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001250:	f003 0310 	and.w	r3, r3, #16
10001254:	2b10      	cmp	r3, #16
10001256:	d105      	bne.n	10001264 <HAL_RCC_OscConfig+0x458>
10001258:	687b      	ldr	r3, [r7, #4]
1000125a:	69db      	ldr	r3, [r3, #28]
1000125c:	2b10      	cmp	r3, #16
1000125e:	d001      	beq.n	10001264 <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
10001260:	2301      	movs	r3, #1
10001262:	e0ff      	b.n	10001464 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10001264:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001268:	69db      	ldr	r3, [r3, #28]
1000126a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
1000126e:	687b      	ldr	r3, [r7, #4]
10001270:	6a1b      	ldr	r3, [r3, #32]
10001272:	021b      	lsls	r3, r3, #8
10001274:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001278:	4313      	orrs	r3, r2
1000127a:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
1000127c:	e046      	b.n	1000130c <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
1000127e:	687b      	ldr	r3, [r7, #4]
10001280:	69db      	ldr	r3, [r3, #28]
10001282:	2b00      	cmp	r3, #0
10001284:	d029      	beq.n	100012da <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
10001286:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000128a:	68db      	ldr	r3, [r3, #12]
1000128c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001290:	f043 0310 	orr.w	r3, r3, #16
10001294:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001296:	f7ff fab3 	bl	10000800 <HAL_GetTick>
1000129a:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
1000129c:	e008      	b.n	100012b0 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
1000129e:	f7ff faaf 	bl	10000800 <HAL_GetTick>
100012a2:	4602      	mov	r2, r0
100012a4:	68bb      	ldr	r3, [r7, #8]
100012a6:	1ad3      	subs	r3, r2, r3
100012a8:	2b64      	cmp	r3, #100	; 0x64
100012aa:	d901      	bls.n	100012b0 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
100012ac:	2303      	movs	r3, #3
100012ae:	e0d9      	b.n	10001464 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
100012b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012b4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100012b8:	f003 0310 	and.w	r3, r3, #16
100012bc:	2b10      	cmp	r3, #16
100012be:	d1ee      	bne.n	1000129e <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
100012c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012c4:	69db      	ldr	r3, [r3, #28]
100012c6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
100012ca:	687b      	ldr	r3, [r7, #4]
100012cc:	6a1b      	ldr	r3, [r3, #32]
100012ce:	021b      	lsls	r3, r3, #8
100012d0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100012d4:	4313      	orrs	r3, r2
100012d6:	61cb      	str	r3, [r1, #28]
100012d8:	e018      	b.n	1000130c <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
100012da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012de:	2210      	movs	r2, #16
100012e0:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100012e2:	f7ff fa8d 	bl	10000800 <HAL_GetTick>
100012e6:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
100012e8:	e008      	b.n	100012fc <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
100012ea:	f7ff fa89 	bl	10000800 <HAL_GetTick>
100012ee:	4602      	mov	r2, r0
100012f0:	68bb      	ldr	r3, [r7, #8]
100012f2:	1ad3      	subs	r3, r2, r3
100012f4:	2b64      	cmp	r3, #100	; 0x64
100012f6:	d901      	bls.n	100012fc <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
100012f8:	2303      	movs	r3, #3
100012fa:	e0b3      	b.n	10001464 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
100012fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001300:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001304:	f003 0310 	and.w	r3, r3, #16
10001308:	2b10      	cmp	r3, #16
1000130a:	d0ee      	beq.n	100012ea <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
1000130c:	687b      	ldr	r3, [r7, #4]
1000130e:	681b      	ldr	r3, [r3, #0]
10001310:	f003 0308 	and.w	r3, r3, #8
10001314:	2b00      	cmp	r3, #0
10001316:	d042      	beq.n	1000139e <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
10001318:	687b      	ldr	r3, [r7, #4]
1000131a:	699b      	ldr	r3, [r3, #24]
1000131c:	2b00      	cmp	r3, #0
1000131e:	d01f      	beq.n	10001360 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
10001320:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001324:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10001328:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000132c:	f043 0301 	orr.w	r3, r3, #1
10001330:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10001334:	f7ff fa64 	bl	10000800 <HAL_GetTick>
10001338:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
1000133a:	e008      	b.n	1000134e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
1000133c:	f7ff fa60 	bl	10000800 <HAL_GetTick>
10001340:	4602      	mov	r2, r0
10001342:	68bb      	ldr	r3, [r7, #8]
10001344:	1ad3      	subs	r3, r2, r3
10001346:	2b64      	cmp	r3, #100	; 0x64
10001348:	d901      	bls.n	1000134e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
1000134a:	2303      	movs	r3, #3
1000134c:	e08a      	b.n	10001464 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
1000134e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001352:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10001356:	f003 0302 	and.w	r3, r3, #2
1000135a:	2b02      	cmp	r3, #2
1000135c:	d1ee      	bne.n	1000133c <HAL_RCC_OscConfig+0x530>
1000135e:	e01e      	b.n	1000139e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10001360:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001364:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10001368:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000136c:	f023 0301 	bic.w	r3, r3, #1
10001370:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10001374:	f7ff fa44 	bl	10000800 <HAL_GetTick>
10001378:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
1000137a:	e008      	b.n	1000138e <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
1000137c:	f7ff fa40 	bl	10000800 <HAL_GetTick>
10001380:	4602      	mov	r2, r0
10001382:	68bb      	ldr	r3, [r7, #8]
10001384:	1ad3      	subs	r3, r2, r3
10001386:	2b64      	cmp	r3, #100	; 0x64
10001388:	d901      	bls.n	1000138e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
1000138a:	2303      	movs	r3, #3
1000138c:	e06a      	b.n	10001464 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
1000138e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001392:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10001396:	f003 0302 	and.w	r3, r3, #2
1000139a:	2b02      	cmp	r3, #2
1000139c:	d0ee      	beq.n	1000137c <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
1000139e:	687b      	ldr	r3, [r7, #4]
100013a0:	681b      	ldr	r3, [r3, #0]
100013a2:	f003 0304 	and.w	r3, r3, #4
100013a6:	2b00      	cmp	r3, #0
100013a8:	d02b      	beq.n	10001402 <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
100013aa:	4b07      	ldr	r3, [pc, #28]	; (100013c8 <HAL_RCC_OscConfig+0x5bc>)
100013ac:	681b      	ldr	r3, [r3, #0]
100013ae:	4a06      	ldr	r2, [pc, #24]	; (100013c8 <HAL_RCC_OscConfig+0x5bc>)
100013b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
100013b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
100013b6:	f7ff fa23 	bl	10000800 <HAL_GetTick>
100013ba:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100013bc:	e00f      	b.n	100013de <HAL_RCC_OscConfig+0x5d2>
100013be:	bf00      	nop
100013c0:	10020000 	.word	0x10020000
100013c4:	10020004 	.word	0x10020004
100013c8:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
100013cc:	f7ff fa18 	bl	10000800 <HAL_GetTick>
100013d0:	4602      	mov	r2, r0
100013d2:	68bb      	ldr	r3, [r7, #8]
100013d4:	1ad3      	subs	r3, r2, r3
100013d6:	2b64      	cmp	r3, #100	; 0x64
100013d8:	d901      	bls.n	100013de <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
100013da:	2303      	movs	r3, #3
100013dc:	e042      	b.n	10001464 <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100013de:	4b23      	ldr	r3, [pc, #140]	; (1000146c <HAL_RCC_OscConfig+0x660>)
100013e0:	681b      	ldr	r3, [r3, #0]
100013e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
100013e6:	2b00      	cmp	r3, #0
100013e8:	d0f0      	beq.n	100013cc <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
100013ea:	687b      	ldr	r3, [r7, #4]
100013ec:	689b      	ldr	r3, [r3, #8]
100013ee:	4618      	mov	r0, r3
100013f0:	f000 f8a9 	bl	10001546 <HAL_RCC_LSEConfig>
100013f4:	4603      	mov	r3, r0
100013f6:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
100013f8:	7bfb      	ldrb	r3, [r7, #15]
100013fa:	2b00      	cmp	r3, #0
100013fc:	d001      	beq.n	10001402 <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
100013fe:	7bfb      	ldrb	r3, [r7, #15]
10001400:	e030      	b.n	10001464 <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
10001402:	687b      	ldr	r3, [r7, #4]
10001404:	3324      	adds	r3, #36	; 0x24
10001406:	4618      	mov	r0, r3
10001408:	f000 f91a 	bl	10001640 <RCC_PLL1_Config>
1000140c:	4603      	mov	r3, r0
1000140e:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001410:	7bfb      	ldrb	r3, [r7, #15]
10001412:	2b00      	cmp	r3, #0
10001414:	d001      	beq.n	1000141a <HAL_RCC_OscConfig+0x60e>
  {
    return result;
10001416:	7bfb      	ldrb	r3, [r7, #15]
10001418:	e024      	b.n	10001464 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
1000141a:	687b      	ldr	r3, [r7, #4]
1000141c:	3360      	adds	r3, #96	; 0x60
1000141e:	4618      	mov	r0, r3
10001420:	f000 fecc 	bl	100021bc <RCCEx_PLL2_Config>
10001424:	4603      	mov	r3, r0
10001426:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001428:	7bfb      	ldrb	r3, [r7, #15]
1000142a:	2b00      	cmp	r3, #0
1000142c:	d001      	beq.n	10001432 <HAL_RCC_OscConfig+0x626>
  {
    return result;
1000142e:	7bfb      	ldrb	r3, [r7, #15]
10001430:	e018      	b.n	10001464 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
10001432:	687b      	ldr	r3, [r7, #4]
10001434:	339c      	adds	r3, #156	; 0x9c
10001436:	4618      	mov	r0, r3
10001438:	f001 f842 	bl	100024c0 <RCCEx_PLL3_Config>
1000143c:	4603      	mov	r3, r0
1000143e:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001440:	7bfb      	ldrb	r3, [r7, #15]
10001442:	2b00      	cmp	r3, #0
10001444:	d001      	beq.n	1000144a <HAL_RCC_OscConfig+0x63e>
  {
    return result;
10001446:	7bfb      	ldrb	r3, [r7, #15]
10001448:	e00c      	b.n	10001464 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
1000144a:	687b      	ldr	r3, [r7, #4]
1000144c:	33d8      	adds	r3, #216	; 0xd8
1000144e:	4618      	mov	r0, r3
10001450:	f001 f9a0 	bl	10002794 <RCCEx_PLL4_Config>
10001454:	4603      	mov	r3, r0
10001456:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001458:	7bfb      	ldrb	r3, [r7, #15]
1000145a:	2b00      	cmp	r3, #0
1000145c:	d001      	beq.n	10001462 <HAL_RCC_OscConfig+0x656>
  {
    return result;
1000145e:	7bfb      	ldrb	r3, [r7, #15]
10001460:	e000      	b.n	10001464 <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
10001462:	2300      	movs	r3, #0
}
10001464:	4618      	mov	r0, r3
10001466:	3710      	adds	r7, #16
10001468:	46bd      	mov	sp, r7
1000146a:	bd80      	pop	{r7, pc}
1000146c:	50001000 	.word	0x50001000

10001470 <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
10001470:	b580      	push	{r7, lr}
10001472:	b084      	sub	sp, #16
10001474:	af00      	add	r7, sp, #0
10001476:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
10001478:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000147c:	f44f 7280 	mov.w	r2, #256	; 0x100
10001480:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001482:	f7ff f9bd 	bl	10000800 <HAL_GetTick>
10001486:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10001488:	e008      	b.n	1000149c <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1000148a:	f7ff f9b9 	bl	10000800 <HAL_GetTick>
1000148e:	4602      	mov	r2, r0
10001490:	68fb      	ldr	r3, [r7, #12]
10001492:	1ad3      	subs	r3, r2, r3
10001494:	2b64      	cmp	r3, #100	; 0x64
10001496:	d901      	bls.n	1000149c <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
10001498:	2303      	movs	r3, #3
1000149a:	e050      	b.n	1000153e <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
1000149c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014a0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100014a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
100014a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100014ac:	d0ed      	beq.n	1000148a <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
100014ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014b2:	f44f 6290 	mov.w	r2, #1152	; 0x480
100014b6:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
100014b8:	687b      	ldr	r3, [r7, #4]
100014ba:	2b00      	cmp	r3, #0
100014bc:	d03e      	beq.n	1000153c <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
100014be:	687b      	ldr	r3, [r7, #4]
100014c0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
100014c4:	d108      	bne.n	100014d8 <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
100014c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014ca:	68db      	ldr	r3, [r3, #12]
100014cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100014d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
100014d4:	60d3      	str	r3, [r2, #12]
100014d6:	e013      	b.n	10001500 <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
100014d8:	687b      	ldr	r3, [r7, #4]
100014da:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
100014de:	d10f      	bne.n	10001500 <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
100014e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014e4:	68db      	ldr	r3, [r3, #12]
100014e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100014ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
100014ee:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
100014f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014f4:	68db      	ldr	r3, [r3, #12]
100014f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100014fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
100014fe:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
10001500:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001504:	68db      	ldr	r3, [r3, #12]
10001506:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000150a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1000150e:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001510:	f7ff f976 	bl	10000800 <HAL_GetTick>
10001514:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001516:	e008      	b.n	1000152a <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10001518:	f7ff f972 	bl	10000800 <HAL_GetTick>
1000151c:	4602      	mov	r2, r0
1000151e:	68fb      	ldr	r3, [r7, #12]
10001520:	1ad3      	subs	r3, r2, r3
10001522:	2b64      	cmp	r3, #100	; 0x64
10001524:	d901      	bls.n	1000152a <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
10001526:	2303      	movs	r3, #3
10001528:	e009      	b.n	1000153e <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000152a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000152e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001532:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
1000153a:	d1ed      	bne.n	10001518 <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
1000153c:	2300      	movs	r3, #0
}
1000153e:	4618      	mov	r0, r3
10001540:	3710      	adds	r7, #16
10001542:	46bd      	mov	sp, r7
10001544:	bd80      	pop	{r7, pc}

10001546 <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
10001546:	b580      	push	{r7, lr}
10001548:	b084      	sub	sp, #16
1000154a:	af00      	add	r7, sp, #0
1000154c:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
1000154e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001552:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10001556:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000155a:	f023 0301 	bic.w	r3, r3, #1
1000155e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001562:	f7ff f94d 	bl	10000800 <HAL_GetTick>
10001566:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10001568:	e00a      	b.n	10001580 <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
1000156a:	f7ff f949 	bl	10000800 <HAL_GetTick>
1000156e:	4602      	mov	r2, r0
10001570:	68fb      	ldr	r3, [r7, #12]
10001572:	1ad3      	subs	r3, r2, r3
10001574:	f241 3288 	movw	r2, #5000	; 0x1388
10001578:	4293      	cmp	r3, r2
1000157a:	d901      	bls.n	10001580 <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
1000157c:	2303      	movs	r3, #3
1000157e:	e05b      	b.n	10001638 <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10001580:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001584:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10001588:	f003 0304 	and.w	r3, r3, #4
1000158c:	2b04      	cmp	r3, #4
1000158e:	d0ec      	beq.n	1000156a <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
10001590:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001594:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10001598:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000159c:	f023 030a 	bic.w	r3, r3, #10
100015a0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
100015a4:	687b      	ldr	r3, [r7, #4]
100015a6:	2b00      	cmp	r3, #0
100015a8:	d045      	beq.n	10001636 <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
100015aa:	687b      	ldr	r3, [r7, #4]
100015ac:	2b03      	cmp	r3, #3
100015ae:	d10a      	bne.n	100015c6 <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
100015b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100015b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100015bc:	f043 0302 	orr.w	r3, r3, #2
100015c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
100015c4:	e016      	b.n	100015f4 <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
100015c6:	687b      	ldr	r3, [r7, #4]
100015c8:	2b0b      	cmp	r3, #11
100015ca:	d113      	bne.n	100015f4 <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
100015cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100015d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100015d8:	f043 0308 	orr.w	r3, r3, #8
100015dc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
100015e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100015e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100015ec:	f043 0302 	orr.w	r3, r3, #2
100015f0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
100015f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100015fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001600:	f043 0301 	orr.w	r3, r3, #1
10001604:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001608:	f7ff f8fa 	bl	10000800 <HAL_GetTick>
1000160c:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
1000160e:	e00a      	b.n	10001626 <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10001610:	f7ff f8f6 	bl	10000800 <HAL_GetTick>
10001614:	4602      	mov	r2, r0
10001616:	68fb      	ldr	r3, [r7, #12]
10001618:	1ad3      	subs	r3, r2, r3
1000161a:	f241 3288 	movw	r2, #5000	; 0x1388
1000161e:	4293      	cmp	r3, r2
10001620:	d901      	bls.n	10001626 <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
10001622:	2303      	movs	r3, #3
10001624:	e008      	b.n	10001638 <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10001626:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000162a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000162e:	f003 0304 	and.w	r3, r3, #4
10001632:	2b04      	cmp	r3, #4
10001634:	d1ec      	bne.n	10001610 <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
10001636:	2300      	movs	r3, #0
}
10001638:	4618      	mov	r0, r3
1000163a:	3710      	adds	r7, #16
1000163c:	46bd      	mov	sp, r7
1000163e:	bd80      	pop	{r7, pc}

10001640 <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
10001640:	b580      	push	{r7, lr}
10001642:	b084      	sub	sp, #16
10001644:	af00      	add	r7, sp, #0
10001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
10001648:	687b      	ldr	r3, [r7, #4]
1000164a:	681b      	ldr	r3, [r3, #0]
1000164c:	2b00      	cmp	r3, #0
1000164e:	f000 8174 	beq.w	1000193a <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
10001652:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001656:	6a1b      	ldr	r3, [r3, #32]
10001658:	f003 0303 	and.w	r3, r3, #3
1000165c:	2b02      	cmp	r3, #2
1000165e:	d108      	bne.n	10001672 <RCC_PLL1_Config+0x32>
10001660:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001664:	6a1b      	ldr	r3, [r3, #32]
10001666:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000166a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000166e:	f000 8162 	beq.w	10001936 <RCC_PLL1_Config+0x2f6>
10001672:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001676:	6a1b      	ldr	r3, [r3, #32]
10001678:	f003 0303 	and.w	r3, r3, #3
1000167c:	2b03      	cmp	r3, #3
1000167e:	d108      	bne.n	10001692 <RCC_PLL1_Config+0x52>
10001680:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001684:	6a1b      	ldr	r3, [r3, #32]
10001686:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000168a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000168e:	f000 8152 	beq.w	10001936 <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
10001692:	687b      	ldr	r3, [r7, #4]
10001694:	681b      	ldr	r3, [r3, #0]
10001696:	2b02      	cmp	r3, #2
10001698:	f040 8123 	bne.w	100018e2 <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
1000169c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100016a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100016a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100016ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
100016b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100016b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100016bc:	f023 0301 	bic.w	r3, r3, #1
100016c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100016c4:	f7ff f89c 	bl	10000800 <HAL_GetTick>
100016c8:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100016ca:	e008      	b.n	100016de <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100016cc:	f7ff f898 	bl	10000800 <HAL_GetTick>
100016d0:	4602      	mov	r2, r0
100016d2:	68fb      	ldr	r3, [r7, #12]
100016d4:	1ad3      	subs	r3, r2, r3
100016d6:	2b64      	cmp	r3, #100	; 0x64
100016d8:	d901      	bls.n	100016de <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
100016da:	2303      	movs	r3, #3
100016dc:	e12e      	b.n	1000193c <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100016de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100016e6:	f003 0302 	and.w	r3, r3, #2
100016ea:	2b02      	cmp	r3, #2
100016ec:	d0ee      	beq.n	100016cc <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
100016ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100016f4:	f003 0307 	and.w	r3, r3, #7
100016f8:	2b02      	cmp	r3, #2
100016fa:	d112      	bne.n	10001722 <RCC_PLL1_Config+0xe2>
100016fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001702:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001706:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000170a:	d10a      	bne.n	10001722 <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
1000170c:	687b      	ldr	r3, [r7, #4]
1000170e:	685a      	ldr	r2, [r3, #4]
10001710:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001716:	f003 0303 	and.w	r3, r3, #3
1000171a:	429a      	cmp	r2, r3
1000171c:	d00c      	beq.n	10001738 <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
1000171e:	2301      	movs	r3, #1
10001720:	e10c      	b.n	1000193c <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
10001722:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001728:	f023 0203 	bic.w	r2, r3, #3
1000172c:	687b      	ldr	r3, [r7, #4]
1000172e:	685b      	ldr	r3, [r3, #4]
10001730:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001734:	4313      	orrs	r3, r2
10001736:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10001738:	e008      	b.n	1000174c <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000173a:	f7ff f861 	bl	10000800 <HAL_GetTick>
1000173e:	4602      	mov	r2, r0
10001740:	68fb      	ldr	r3, [r7, #12]
10001742:	1ad3      	subs	r3, r2, r3
10001744:	2b64      	cmp	r3, #100	; 0x64
10001746:	d901      	bls.n	1000174c <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
10001748:	2303      	movs	r3, #3
1000174a:	e0f7      	b.n	1000193c <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
1000174c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001752:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001756:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000175a:	d1ee      	bne.n	1000173a <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
1000175c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001760:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
10001764:	4b77      	ldr	r3, [pc, #476]	; (10001944 <RCC_PLL1_Config+0x304>)
10001766:	4013      	ands	r3, r2
10001768:	687a      	ldr	r2, [r7, #4]
1000176a:	68d2      	ldr	r2, [r2, #12]
1000176c:	1e51      	subs	r1, r2, #1
1000176e:	687a      	ldr	r2, [r7, #4]
10001770:	6892      	ldr	r2, [r2, #8]
10001772:	3a01      	subs	r2, #1
10001774:	0412      	lsls	r2, r2, #16
10001776:	430a      	orrs	r2, r1
10001778:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000177c:	4313      	orrs	r3, r2
1000177e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
10001782:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
1000178a:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
1000178e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10001792:	687a      	ldr	r2, [r7, #4]
10001794:	6912      	ldr	r2, [r2, #16]
10001796:	1e51      	subs	r1, r2, #1
10001798:	687a      	ldr	r2, [r7, #4]
1000179a:	6952      	ldr	r2, [r2, #20]
1000179c:	3a01      	subs	r2, #1
1000179e:	0212      	lsls	r2, r2, #8
100017a0:	4311      	orrs	r1, r2
100017a2:	687a      	ldr	r2, [r7, #4]
100017a4:	6992      	ldr	r2, [r2, #24]
100017a6:	3a01      	subs	r2, #1
100017a8:	0412      	lsls	r2, r2, #16
100017aa:	430a      	orrs	r2, r1
100017ac:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100017b0:	4313      	orrs	r3, r2
100017b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
100017b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100017ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
100017be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100017c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
100017c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
100017ca:	687b      	ldr	r3, [r7, #4]
100017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100017ce:	2b02      	cmp	r3, #2
100017d0:	d003      	beq.n	100017da <RCC_PLL1_Config+0x19a>
100017d2:	687b      	ldr	r3, [r7, #4]
100017d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100017d6:	2b00      	cmp	r3, #0
100017d8:	d10c      	bne.n	100017f4 <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
100017da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100017de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
100017e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100017e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100017ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100017ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
100017f2:	e00f      	b.n	10001814 <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
100017f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100017f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
100017fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10001800:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10001804:	687a      	ldr	r2, [r7, #4]
10001806:	6a12      	ldr	r2, [r2, #32]
10001808:	00d2      	lsls	r2, r2, #3
1000180a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000180e:	4313      	orrs	r3, r2
10001810:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
10001814:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
1000181c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10001824:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10001828:	687b      	ldr	r3, [r7, #4]
1000182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000182c:	2b02      	cmp	r3, #2
1000182e:	d124      	bne.n	1000187a <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
10001830:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
10001838:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
1000183c:	687b      	ldr	r3, [r7, #4]
1000183e:	6a99      	ldr	r1, [r3, #40]	; 0x28
10001840:	687b      	ldr	r3, [r7, #4]
10001842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001844:	4319      	orrs	r1, r3
10001846:	687b      	ldr	r3, [r7, #4]
10001848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000184a:	4319      	orrs	r1, r3
1000184c:	687b      	ldr	r3, [r7, #4]
1000184e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10001850:	4319      	orrs	r1, r3
10001852:	687b      	ldr	r3, [r7, #4]
10001854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10001856:	041b      	lsls	r3, r3, #16
10001858:	430b      	orrs	r3, r1
1000185a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000185e:	4313      	orrs	r3, r2
10001860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
10001864:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000186c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001870:	f043 0304 	orr.w	r3, r3, #4
10001874:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
10001878:	e009      	b.n	1000188e <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
1000187a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000187e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001882:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001886:	f023 0304 	bic.w	r3, r3, #4
1000188a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
1000188e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001892:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001896:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000189a:	f043 0301 	orr.w	r3, r3, #1
1000189e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100018a2:	f7fe ffad 	bl	10000800 <HAL_GetTick>
100018a6:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100018a8:	e008      	b.n	100018bc <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100018aa:	f7fe ffa9 	bl	10000800 <HAL_GetTick>
100018ae:	4602      	mov	r2, r0
100018b0:	68fb      	ldr	r3, [r7, #12]
100018b2:	1ad3      	subs	r3, r2, r3
100018b4:	2b64      	cmp	r3, #100	; 0x64
100018b6:	d901      	bls.n	100018bc <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
100018b8:	2303      	movs	r3, #3
100018ba:	e03f      	b.n	1000193c <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100018bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100018c4:	f003 0302 	and.w	r3, r3, #2
100018c8:	2b02      	cmp	r3, #2
100018ca:	d1ee      	bne.n	100018aa <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100018cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100018d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100018d8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
100018dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
100018e0:	e02b      	b.n	1000193a <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100018e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100018ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100018ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100018f2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
100018f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100018fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001902:	f023 0301 	bic.w	r3, r3, #1
10001906:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000190a:	f7fe ff79 	bl	10000800 <HAL_GetTick>
1000190e:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10001910:	e008      	b.n	10001924 <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001912:	f7fe ff75 	bl	10000800 <HAL_GetTick>
10001916:	4602      	mov	r2, r0
10001918:	68fb      	ldr	r3, [r7, #12]
1000191a:	1ad3      	subs	r3, r2, r3
1000191c:	2b64      	cmp	r3, #100	; 0x64
1000191e:	d901      	bls.n	10001924 <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
10001920:	2303      	movs	r3, #3
10001922:	e00b      	b.n	1000193c <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10001924:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000192c:	f003 0302 	and.w	r3, r3, #2
10001930:	2b02      	cmp	r3, #2
10001932:	d0ee      	beq.n	10001912 <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
10001934:	e001      	b.n	1000193a <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10001936:	2301      	movs	r3, #1
10001938:	e000      	b.n	1000193c <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
1000193a:	2300      	movs	r3, #0

}
1000193c:	4618      	mov	r0, r3
1000193e:	3710      	adds	r7, #16
10001940:	46bd      	mov	sp, r7
10001942:	bd80      	pop	{r7, pc}
10001944:	ffc0fe00 	.word	0xffc0fe00

10001948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
10001948:	b580      	push	{r7, lr}
1000194a:	b084      	sub	sp, #16
1000194c:	af00      	add	r7, sp, #0
1000194e:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
10001950:	2300      	movs	r3, #0
10001952:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10001954:	687b      	ldr	r3, [r7, #4]
10001956:	2b00      	cmp	r3, #0
10001958:	d101      	bne.n	1000195e <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
1000195a:	2301      	movs	r3, #1
1000195c:	e102      	b.n	10001b64 <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
1000195e:	687b      	ldr	r3, [r7, #4]
10001960:	681b      	ldr	r3, [r3, #0]
10001962:	f003 0301 	and.w	r3, r3, #1
10001966:	2b00      	cmp	r3, #0
10001968:	d00b      	beq.n	10001982 <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
1000196a:	687b      	ldr	r3, [r7, #4]
1000196c:	3304      	adds	r3, #4
1000196e:	4618      	mov	r0, r3
10001970:	f000 f8fc 	bl	10001b6c <RCC_MPUConfig>
10001974:	4603      	mov	r3, r0
10001976:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10001978:	7bfb      	ldrb	r3, [r7, #15]
1000197a:	2b00      	cmp	r3, #0
1000197c:	d001      	beq.n	10001982 <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
1000197e:	7bfb      	ldrb	r3, [r7, #15]
10001980:	e0f0      	b.n	10001b64 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
10001982:	687b      	ldr	r3, [r7, #4]
10001984:	681b      	ldr	r3, [r3, #0]
10001986:	f003 0302 	and.w	r3, r3, #2
1000198a:	2b00      	cmp	r3, #0
1000198c:	d00b      	beq.n	100019a6 <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
1000198e:	687b      	ldr	r3, [r7, #4]
10001990:	330c      	adds	r3, #12
10001992:	4618      	mov	r0, r3
10001994:	f000 f960 	bl	10001c58 <RCC_AXISSConfig>
10001998:	4603      	mov	r3, r0
1000199a:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
1000199c:	7bfb      	ldrb	r3, [r7, #15]
1000199e:	2b00      	cmp	r3, #0
100019a0:	d001      	beq.n	100019a6 <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
100019a2:	7bfb      	ldrb	r3, [r7, #15]
100019a4:	e0de      	b.n	10001b64 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
100019a6:	687b      	ldr	r3, [r7, #4]
100019a8:	681b      	ldr	r3, [r3, #0]
100019aa:	f003 0304 	and.w	r3, r3, #4
100019ae:	2b00      	cmp	r3, #0
100019b0:	d00b      	beq.n	100019ca <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
100019b2:	687b      	ldr	r3, [r7, #4]
100019b4:	3314      	adds	r3, #20
100019b6:	4618      	mov	r0, r3
100019b8:	f000 f9e6 	bl	10001d88 <RCC_MCUConfig>
100019bc:	4603      	mov	r3, r0
100019be:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
100019c0:	7bfb      	ldrb	r3, [r7, #15]
100019c2:	2b00      	cmp	r3, #0
100019c4:	d001      	beq.n	100019ca <HAL_RCC_ClockConfig+0x82>
    {
      return status;
100019c6:	7bfb      	ldrb	r3, [r7, #15]
100019c8:	e0cc      	b.n	10001b64 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
100019ca:	687b      	ldr	r3, [r7, #4]
100019cc:	681b      	ldr	r3, [r3, #0]
100019ce:	f003 0308 	and.w	r3, r3, #8
100019d2:	2b00      	cmp	r3, #0
100019d4:	d020      	beq.n	10001a18 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
100019d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100019da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100019dc:	f023 0207 	bic.w	r2, r3, #7
100019e0:	687b      	ldr	r3, [r7, #4]
100019e2:	69db      	ldr	r3, [r3, #28]
100019e4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100019e8:	4313      	orrs	r3, r2
100019ea:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100019ec:	f7fe ff08 	bl	10000800 <HAL_GetTick>
100019f0:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
100019f2:	e009      	b.n	10001a08 <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100019f4:	f7fe ff04 	bl	10000800 <HAL_GetTick>
100019f8:	4602      	mov	r2, r0
100019fa:	68bb      	ldr	r3, [r7, #8]
100019fc:	1ad3      	subs	r3, r2, r3
100019fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001a02:	d901      	bls.n	10001a08 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
10001a04:	2303      	movs	r3, #3
10001a06:	e0ad      	b.n	10001b64 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10001a08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001a0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001a12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001a16:	d1ed      	bne.n	100019f4 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
10001a18:	687b      	ldr	r3, [r7, #4]
10001a1a:	681b      	ldr	r3, [r3, #0]
10001a1c:	f003 0310 	and.w	r3, r3, #16
10001a20:	2b00      	cmp	r3, #0
10001a22:	d020      	beq.n	10001a66 <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
10001a24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001a2a:	f023 0207 	bic.w	r2, r3, #7
10001a2e:	687b      	ldr	r3, [r7, #4]
10001a30:	6a1b      	ldr	r3, [r3, #32]
10001a32:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001a36:	4313      	orrs	r3, r2
10001a38:	640b      	str	r3, [r1, #64]	; 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001a3a:	f7fe fee1 	bl	10000800 <HAL_GetTick>
10001a3e:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10001a40:	e009      	b.n	10001a56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001a42:	f7fe fedd 	bl	10000800 <HAL_GetTick>
10001a46:	4602      	mov	r2, r0
10001a48:	68bb      	ldr	r3, [r7, #8]
10001a4a:	1ad3      	subs	r3, r2, r3
10001a4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001a50:	d901      	bls.n	10001a56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
10001a52:	2303      	movs	r3, #3
10001a54:	e086      	b.n	10001b64 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10001a56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001a5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001a60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001a64:	d1ed      	bne.n	10001a42 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
10001a66:	687b      	ldr	r3, [r7, #4]
10001a68:	681b      	ldr	r3, [r3, #0]
10001a6a:	f003 0320 	and.w	r3, r3, #32
10001a6e:	2b00      	cmp	r3, #0
10001a70:	d023      	beq.n	10001aba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
10001a72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a76:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10001a7a:	f023 0207 	bic.w	r2, r3, #7
10001a7e:	687b      	ldr	r3, [r7, #4]
10001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001a82:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001a86:	4313      	orrs	r3, r2
10001a88:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001a8c:	f7fe feb8 	bl	10000800 <HAL_GetTick>
10001a90:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10001a92:	e009      	b.n	10001aa8 <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001a94:	f7fe feb4 	bl	10000800 <HAL_GetTick>
10001a98:	4602      	mov	r2, r0
10001a9a:	68bb      	ldr	r3, [r7, #8]
10001a9c:	1ad3      	subs	r3, r2, r3
10001a9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001aa2:	d901      	bls.n	10001aa8 <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
10001aa4:	2303      	movs	r3, #3
10001aa6:	e05d      	b.n	10001b64 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10001aa8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001aac:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10001ab0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001ab8:	d1ec      	bne.n	10001a94 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
10001aba:	687b      	ldr	r3, [r7, #4]
10001abc:	681b      	ldr	r3, [r3, #0]
10001abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
10001ac2:	2b00      	cmp	r3, #0
10001ac4:	d023      	beq.n	10001b0e <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
10001ac6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001aca:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10001ace:	f023 0207 	bic.w	r2, r3, #7
10001ad2:	687b      	ldr	r3, [r7, #4]
10001ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001ad6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001ada:	4313      	orrs	r3, r2
10001adc:	f8c1 3838 	str.w	r3, [r1, #2104]	; 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001ae0:	f7fe fe8e 	bl	10000800 <HAL_GetTick>
10001ae4:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10001ae6:	e009      	b.n	10001afc <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001ae8:	f7fe fe8a 	bl	10000800 <HAL_GetTick>
10001aec:	4602      	mov	r2, r0
10001aee:	68bb      	ldr	r3, [r7, #8]
10001af0:	1ad3      	subs	r3, r2, r3
10001af2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001af6:	d901      	bls.n	10001afc <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
10001af8:	2303      	movs	r3, #3
10001afa:	e033      	b.n	10001b64 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10001afc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b00:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10001b04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001b08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001b0c:	d1ec      	bne.n	10001ae8 <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
10001b0e:	687b      	ldr	r3, [r7, #4]
10001b10:	681b      	ldr	r3, [r3, #0]
10001b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
10001b16:	2b00      	cmp	r3, #0
10001b18:	d023      	beq.n	10001b62 <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
10001b1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b1e:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
10001b22:	f023 0207 	bic.w	r2, r3, #7
10001b26:	687b      	ldr	r3, [r7, #4]
10001b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001b2a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001b2e:	4313      	orrs	r3, r2
10001b30:	f8c1 383c 	str.w	r3, [r1, #2108]	; 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001b34:	f7fe fe64 	bl	10000800 <HAL_GetTick>
10001b38:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10001b3a:	e009      	b.n	10001b50 <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001b3c:	f7fe fe60 	bl	10000800 <HAL_GetTick>
10001b40:	4602      	mov	r2, r0
10001b42:	68bb      	ldr	r3, [r7, #8]
10001b44:	1ad3      	subs	r3, r2, r3
10001b46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001b4a:	d901      	bls.n	10001b50 <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
10001b4c:	2303      	movs	r3, #3
10001b4e:	e009      	b.n	10001b64 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10001b50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b54:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
10001b58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001b5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001b60:	d1ec      	bne.n	10001b3c <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
10001b62:	2300      	movs	r3, #0
}
10001b64:	4618      	mov	r0, r3
10001b66:	3710      	adds	r7, #16
10001b68:	46bd      	mov	sp, r7
10001b6a:	bd80      	pop	{r7, pc}

10001b6c <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
10001b6c:	b580      	push	{r7, lr}
10001b6e:	b084      	sub	sp, #16
10001b70:	af00      	add	r7, sp, #0
10001b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
10001b74:	687b      	ldr	r3, [r7, #4]
10001b76:	681b      	ldr	r3, [r3, #0]
10001b78:	2b03      	cmp	r3, #3
10001b7a:	d840      	bhi.n	10001bfe <RCC_MPUConfig+0x92>
10001b7c:	a201      	add	r2, pc, #4	; (adr r2, 10001b84 <RCC_MPUConfig+0x18>)
10001b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001b82:	bf00      	nop
10001b84:	10001b95 	.word	0x10001b95
10001b88:	10001ba9 	.word	0x10001ba9
10001b8c:	10001bbf 	.word	0x10001bbf
10001b90:	10001bd3 	.word	0x10001bd3
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001b94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b98:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001b9c:	f003 0301 	and.w	r3, r3, #1
10001ba0:	2b01      	cmp	r3, #1
10001ba2:	d02e      	beq.n	10001c02 <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
10001ba4:	2301      	movs	r3, #1
10001ba6:	e053      	b.n	10001c50 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001ba8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001bac:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001bb8:	d025      	beq.n	10001c06 <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
10001bba:	2301      	movs	r3, #1
10001bbc:	e048      	b.n	10001c50 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10001bbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001bc6:	f003 0302 	and.w	r3, r3, #2
10001bca:	2b02      	cmp	r3, #2
10001bcc:	d01d      	beq.n	10001c0a <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
10001bce:	2301      	movs	r3, #1
10001bd0:	e03e      	b.n	10001c50 <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10001bd2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001bda:	f003 0302 	and.w	r3, r3, #2
10001bde:	2b02      	cmp	r3, #2
10001be0:	d001      	beq.n	10001be6 <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
10001be2:	2301      	movs	r3, #1
10001be4:	e034      	b.n	10001c50 <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
10001be6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001bec:	f023 0207 	bic.w	r2, r3, #7
10001bf0:	687b      	ldr	r3, [r7, #4]
10001bf2:	685b      	ldr	r3, [r3, #4]
10001bf4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001bf8:	4313      	orrs	r3, r2
10001bfa:	62cb      	str	r3, [r1, #44]	; 0x2c

      break;
10001bfc:	e006      	b.n	10001c0c <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
10001bfe:	2301      	movs	r3, #1
10001c00:	e026      	b.n	10001c50 <RCC_MPUConfig+0xe4>
      break;
10001c02:	bf00      	nop
10001c04:	e002      	b.n	10001c0c <RCC_MPUConfig+0xa0>
      break;
10001c06:	bf00      	nop
10001c08:	e000      	b.n	10001c0c <RCC_MPUConfig+0xa0>
      break;
10001c0a:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
10001c0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c10:	6a1b      	ldr	r3, [r3, #32]
10001c12:	f023 0203 	bic.w	r2, r3, #3
10001c16:	687b      	ldr	r3, [r7, #4]
10001c18:	681b      	ldr	r3, [r3, #0]
10001c1a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001c1e:	4313      	orrs	r3, r2
10001c20:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001c22:	f7fe fded 	bl	10000800 <HAL_GetTick>
10001c26:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10001c28:	e009      	b.n	10001c3e <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001c2a:	f7fe fde9 	bl	10000800 <HAL_GetTick>
10001c2e:	4602      	mov	r2, r0
10001c30:	68fb      	ldr	r3, [r7, #12]
10001c32:	1ad3      	subs	r3, r2, r3
10001c34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001c38:	d901      	bls.n	10001c3e <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
10001c3a:	2303      	movs	r3, #3
10001c3c:	e008      	b.n	10001c50 <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10001c3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c42:	6a1b      	ldr	r3, [r3, #32]
10001c44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001c48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001c4c:	d1ed      	bne.n	10001c2a <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
10001c4e:	2300      	movs	r3, #0
}
10001c50:	4618      	mov	r0, r3
10001c52:	3710      	adds	r7, #16
10001c54:	46bd      	mov	sp, r7
10001c56:	bd80      	pop	{r7, pc}

10001c58 <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
10001c58:	b580      	push	{r7, lr}
10001c5a:	b084      	sub	sp, #16
10001c5c:	af00      	add	r7, sp, #0
10001c5e:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
10001c60:	687b      	ldr	r3, [r7, #4]
10001c62:	681b      	ldr	r3, [r3, #0]
10001c64:	2b02      	cmp	r3, #2
10001c66:	d01b      	beq.n	10001ca0 <RCC_AXISSConfig+0x48>
10001c68:	2b02      	cmp	r3, #2
10001c6a:	d823      	bhi.n	10001cb4 <RCC_AXISSConfig+0x5c>
10001c6c:	2b00      	cmp	r3, #0
10001c6e:	d002      	beq.n	10001c76 <RCC_AXISSConfig+0x1e>
10001c70:	2b01      	cmp	r3, #1
10001c72:	d00a      	beq.n	10001c8a <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
10001c74:	e01e      	b.n	10001cb4 <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001c76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c7a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001c7e:	f003 0301 	and.w	r3, r3, #1
10001c82:	2b01      	cmp	r3, #1
10001c84:	d018      	beq.n	10001cb8 <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
10001c86:	2301      	movs	r3, #1
10001c88:	e079      	b.n	10001d7e <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001c8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c8e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001c9a:	d00f      	beq.n	10001cbc <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
10001c9c:	2301      	movs	r3, #1
10001c9e:	e06e      	b.n	10001d7e <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10001ca0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001ca8:	f003 0302 	and.w	r3, r3, #2
10001cac:	2b02      	cmp	r3, #2
10001cae:	d007      	beq.n	10001cc0 <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
10001cb0:	2301      	movs	r3, #1
10001cb2:	e064      	b.n	10001d7e <RCC_AXISSConfig+0x126>
      break;
10001cb4:	bf00      	nop
10001cb6:	e004      	b.n	10001cc2 <RCC_AXISSConfig+0x6a>
      break;
10001cb8:	bf00      	nop
10001cba:	e002      	b.n	10001cc2 <RCC_AXISSConfig+0x6a>
      break;
10001cbc:	bf00      	nop
10001cbe:	e000      	b.n	10001cc2 <RCC_AXISSConfig+0x6a>
      break;
10001cc0:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
10001cc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001cc8:	f023 0207 	bic.w	r2, r3, #7
10001ccc:	687b      	ldr	r3, [r7, #4]
10001cce:	681b      	ldr	r3, [r3, #0]
10001cd0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001cd4:	4313      	orrs	r3, r2
10001cd6:	624b      	str	r3, [r1, #36]	; 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
10001cd8:	687b      	ldr	r3, [r7, #4]
10001cda:	681b      	ldr	r3, [r3, #0]
10001cdc:	2b03      	cmp	r3, #3
10001cde:	d016      	beq.n	10001d0e <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001ce0:	f7fe fd8e 	bl	10000800 <HAL_GetTick>
10001ce4:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10001ce6:	e009      	b.n	10001cfc <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001ce8:	f7fe fd8a 	bl	10000800 <HAL_GetTick>
10001cec:	4602      	mov	r2, r0
10001cee:	68fb      	ldr	r3, [r7, #12]
10001cf0:	1ad3      	subs	r3, r2, r3
10001cf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001cf6:	d901      	bls.n	10001cfc <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
10001cf8:	2303      	movs	r3, #3
10001cfa:	e040      	b.n	10001d7e <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10001cfc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001d02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001d06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001d0a:	d1ed      	bne.n	10001ce8 <RCC_AXISSConfig+0x90>
10001d0c:	e015      	b.n	10001d3a <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001d0e:	f7fe fd77 	bl	10000800 <HAL_GetTick>
10001d12:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10001d14:	e009      	b.n	10001d2a <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001d16:	f7fe fd73 	bl	10000800 <HAL_GetTick>
10001d1a:	4602      	mov	r2, r0
10001d1c:	68fb      	ldr	r3, [r7, #12]
10001d1e:	1ad3      	subs	r3, r2, r3
10001d20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001d24:	d901      	bls.n	10001d2a <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
10001d26:	2303      	movs	r3, #3
10001d28:	e029      	b.n	10001d7e <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10001d2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001d30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001d34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001d38:	d0ed      	beq.n	10001d16 <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
10001d3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001d40:	f023 0207 	bic.w	r2, r3, #7
10001d44:	687b      	ldr	r3, [r7, #4]
10001d46:	685b      	ldr	r3, [r3, #4]
10001d48:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001d4c:	4313      	orrs	r3, r2
10001d4e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001d50:	f7fe fd56 	bl	10000800 <HAL_GetTick>
10001d54:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10001d56:	e009      	b.n	10001d6c <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001d58:	f7fe fd52 	bl	10000800 <HAL_GetTick>
10001d5c:	4602      	mov	r2, r0
10001d5e:	68fb      	ldr	r3, [r7, #12]
10001d60:	1ad3      	subs	r3, r2, r3
10001d62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001d66:	d901      	bls.n	10001d6c <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
10001d68:	2303      	movs	r3, #3
10001d6a:	e008      	b.n	10001d7e <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10001d6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001d72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001d76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001d7a:	d1ed      	bne.n	10001d58 <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
10001d7c:	2300      	movs	r3, #0
}
10001d7e:	4618      	mov	r0, r3
10001d80:	3710      	adds	r7, #16
10001d82:	46bd      	mov	sp, r7
10001d84:	bd80      	pop	{r7, pc}
	...

10001d88 <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
10001d88:	b580      	push	{r7, lr}
10001d8a:	b084      	sub	sp, #16
10001d8c:	af00      	add	r7, sp, #0
10001d8e:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
10001d90:	687b      	ldr	r3, [r7, #4]
10001d92:	681b      	ldr	r3, [r3, #0]
10001d94:	2b03      	cmp	r3, #3
10001d96:	d834      	bhi.n	10001e02 <RCC_MCUConfig+0x7a>
10001d98:	a201      	add	r2, pc, #4	; (adr r2, 10001da0 <RCC_MCUConfig+0x18>)
10001d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001d9e:	bf00      	nop
10001da0:	10001db1 	.word	0x10001db1
10001da4:	10001dc5 	.word	0x10001dc5
10001da8:	10001ddb 	.word	0x10001ddb
10001dac:	10001def 	.word	0x10001def
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001db0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001db4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001db8:	f003 0301 	and.w	r3, r3, #1
10001dbc:	2b01      	cmp	r3, #1
10001dbe:	d022      	beq.n	10001e06 <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
10001dc0:	2301      	movs	r3, #1
10001dc2:	e081      	b.n	10001ec8 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001dc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001dc8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001dd4:	d019      	beq.n	10001e0a <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
10001dd6:	2301      	movs	r3, #1
10001dd8:	e076      	b.n	10001ec8 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10001dda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001dde:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001de2:	f003 0310 	and.w	r3, r3, #16
10001de6:	2b10      	cmp	r3, #16
10001de8:	d011      	beq.n	10001e0e <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
10001dea:	2301      	movs	r3, #1
10001dec:	e06c      	b.n	10001ec8 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10001dee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001df2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001df6:	f003 0302 	and.w	r3, r3, #2
10001dfa:	2b02      	cmp	r3, #2
10001dfc:	d009      	beq.n	10001e12 <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
10001dfe:	2301      	movs	r3, #1
10001e00:	e062      	b.n	10001ec8 <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
10001e02:	bf00      	nop
10001e04:	e006      	b.n	10001e14 <RCC_MCUConfig+0x8c>
      break;
10001e06:	bf00      	nop
10001e08:	e004      	b.n	10001e14 <RCC_MCUConfig+0x8c>
      break;
10001e0a:	bf00      	nop
10001e0c:	e002      	b.n	10001e14 <RCC_MCUConfig+0x8c>
      break;
10001e0e:	bf00      	nop
10001e10:	e000      	b.n	10001e14 <RCC_MCUConfig+0x8c>
      break;
10001e12:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
10001e14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001e1a:	f023 0203 	bic.w	r2, r3, #3
10001e1e:	687b      	ldr	r3, [r7, #4]
10001e20:	681b      	ldr	r3, [r3, #0]
10001e22:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001e26:	4313      	orrs	r3, r2
10001e28:	648b      	str	r3, [r1, #72]	; 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001e2a:	f7fe fce9 	bl	10000800 <HAL_GetTick>
10001e2e:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10001e30:	e009      	b.n	10001e46 <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001e32:	f7fe fce5 	bl	10000800 <HAL_GetTick>
10001e36:	4602      	mov	r2, r0
10001e38:	68fb      	ldr	r3, [r7, #12]
10001e3a:	1ad3      	subs	r3, r2, r3
10001e3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001e40:	d901      	bls.n	10001e46 <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
10001e42:	2303      	movs	r3, #3
10001e44:	e040      	b.n	10001ec8 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10001e46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001e4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001e50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001e54:	d1ed      	bne.n	10001e32 <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001e56:	f000 f954 	bl	10002102 <HAL_RCC_GetSystemCoreClockFreq>
10001e5a:	4603      	mov	r3, r0
10001e5c:	4a1c      	ldr	r2, [pc, #112]	; (10001ed0 <RCC_MCUConfig+0x148>)
10001e5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10001e60:	4b1c      	ldr	r3, [pc, #112]	; (10001ed4 <RCC_MCUConfig+0x14c>)
10001e62:	681b      	ldr	r3, [r3, #0]
10001e64:	4618      	mov	r0, r3
10001e66:	f7fe fc81 	bl	1000076c <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
10001e6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e6e:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10001e72:	f023 020f 	bic.w	r2, r3, #15
10001e76:	687b      	ldr	r3, [r7, #4]
10001e78:	685b      	ldr	r3, [r3, #4]
10001e7a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001e7e:	4313      	orrs	r3, r2
10001e80:	f8c1 3830 	str.w	r3, [r1, #2096]	; 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001e84:	f7fe fcbc 	bl	10000800 <HAL_GetTick>
10001e88:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10001e8a:	e009      	b.n	10001ea0 <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001e8c:	f7fe fcb8 	bl	10000800 <HAL_GetTick>
10001e90:	4602      	mov	r2, r0
10001e92:	68fb      	ldr	r3, [r7, #12]
10001e94:	1ad3      	subs	r3, r2, r3
10001e96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001e9a:	d901      	bls.n	10001ea0 <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
10001e9c:	2303      	movs	r3, #3
10001e9e:	e013      	b.n	10001ec8 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10001ea0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ea4:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10001ea8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001eac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001eb0:	d1ec      	bne.n	10001e8c <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001eb2:	f000 f926 	bl	10002102 <HAL_RCC_GetSystemCoreClockFreq>
10001eb6:	4603      	mov	r3, r0
10001eb8:	4a05      	ldr	r2, [pc, #20]	; (10001ed0 <RCC_MCUConfig+0x148>)
10001eba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10001ebc:	4b05      	ldr	r3, [pc, #20]	; (10001ed4 <RCC_MCUConfig+0x14c>)
10001ebe:	681b      	ldr	r3, [r3, #0]
10001ec0:	4618      	mov	r0, r3
10001ec2:	f7fe fc53 	bl	1000076c <HAL_InitTick>
#endif

  return HAL_OK;
10001ec6:	2300      	movs	r3, #0
}
10001ec8:	4618      	mov	r0, r3
10001eca:	3710      	adds	r7, #16
10001ecc:	46bd      	mov	sp, r7
10001ece:	bd80      	pop	{r7, pc}
10001ed0:	10020000 	.word	0x10020000
10001ed4:	10020004 	.word	0x10020004

10001ed8 <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
10001ed8:	b480      	push	{r7}
10001eda:	b089      	sub	sp, #36	; 0x24
10001edc:	af00      	add	r7, sp, #0
10001ede:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
10001ee0:	2300      	movs	r3, #0
10001ee2:	61bb      	str	r3, [r7, #24]
10001ee4:	2301      	movs	r3, #1
10001ee6:	617b      	str	r3, [r7, #20]
10001ee8:	2300      	movs	r3, #0
10001eea:	613b      	str	r3, [r7, #16]
10001eec:	2300      	movs	r3, #0
10001eee:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
10001ef0:	f04f 0300 	mov.w	r3, #0
10001ef4:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
10001ef6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001efa:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10001efe:	f003 0303 	and.w	r3, r3, #3
10001f02:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
10001f04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f08:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10001f0c:	0c1b      	lsrs	r3, r3, #16
10001f0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10001f12:	3301      	adds	r3, #1
10001f14:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
10001f16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f1a:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10001f1e:	0c1b      	lsrs	r3, r3, #16
10001f20:	f003 0301 	and.w	r3, r3, #1
10001f24:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
10001f26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f2a:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10001f2e:	08db      	lsrs	r3, r3, #3
10001f30:	f3c3 030c 	ubfx	r3, r3, #0, #13
10001f34:	693a      	ldr	r2, [r7, #16]
10001f36:	fb02 f303 	mul.w	r3, r2, r3
10001f3a:	ee07 3a90 	vmov	s15, r3
10001f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001f42:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
10001f46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f4a:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10001f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
10001f52:	3301      	adds	r3, #1
10001f54:	ee07 3a90 	vmov	s15, r3
10001f58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001f5c:	edd7 6a02 	vldr	s13, [r7, #8]
10001f60:	ed9f 6a56 	vldr	s12, [pc, #344]	; 100020bc <HAL_RCC_GetPLL3ClockFreq+0x1e4>
10001f64:	eec6 7a86 	vdiv.f32	s15, s13, s12
10001f68:	ee77 7a27 	vadd.f32	s15, s14, s15
10001f6c:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10001f70:	69bb      	ldr	r3, [r7, #24]
10001f72:	2b03      	cmp	r3, #3
10001f74:	d85b      	bhi.n	1000202e <HAL_RCC_GetPLL3ClockFreq+0x156>
10001f76:	a201      	add	r2, pc, #4	; (adr r2, 10001f7c <HAL_RCC_GetPLL3ClockFreq+0xa4>)
10001f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001f7c:	10001f8d 	.word	0x10001f8d
10001f80:	10001feb 	.word	0x10001feb
10001f84:	10002009 	.word	0x10002009
10001f88:	10002027 	.word	0x10002027
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10001f8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f90:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001f94:	f003 0304 	and.w	r3, r3, #4
10001f98:	2b04      	cmp	r3, #4
10001f9a:	d117      	bne.n	10001fcc <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10001f9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fa0:	699b      	ldr	r3, [r3, #24]
10001fa2:	f003 0303 	and.w	r3, r3, #3
10001fa6:	4a46      	ldr	r2, [pc, #280]	; (100020c0 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10001fa8:	fa22 f303 	lsr.w	r3, r2, r3
10001fac:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
10001fae:	68fa      	ldr	r2, [r7, #12]
10001fb0:	697b      	ldr	r3, [r7, #20]
10001fb2:	fbb2 f3f3 	udiv	r3, r2, r3
10001fb6:	ee07 3a90 	vmov	s15, r3
10001fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001fbe:	ed97 7a07 	vldr	s14, [r7, #28]
10001fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
10001fc6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
10001fca:	e030      	b.n	1000202e <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
10001fcc:	4a3c      	ldr	r2, [pc, #240]	; (100020c0 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10001fce:	697b      	ldr	r3, [r7, #20]
10001fd0:	fbb2 f3f3 	udiv	r3, r2, r3
10001fd4:	ee07 3a90 	vmov	s15, r3
10001fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001fdc:	ed97 7a07 	vldr	s14, [r7, #28]
10001fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
10001fe4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001fe8:	e021      	b.n	1000202e <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
10001fea:	4a36      	ldr	r2, [pc, #216]	; (100020c4 <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
10001fec:	697b      	ldr	r3, [r7, #20]
10001fee:	fbb2 f3f3 	udiv	r3, r2, r3
10001ff2:	ee07 3a90 	vmov	s15, r3
10001ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001ffa:	ed97 7a07 	vldr	s14, [r7, #28]
10001ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
10002002:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002006:	e012      	b.n	1000202e <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
10002008:	4a2f      	ldr	r2, [pc, #188]	; (100020c8 <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
1000200a:	697b      	ldr	r3, [r7, #20]
1000200c:	fbb2 f3f3 	udiv	r3, r2, r3
10002010:	ee07 3a90 	vmov	s15, r3
10002014:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002018:	ed97 7a07 	vldr	s14, [r7, #28]
1000201c:	ee67 7a27 	vmul.f32	s15, s14, s15
10002020:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002024:	e003      	b.n	1000202e <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
10002026:	f04f 0300 	mov.w	r3, #0
1000202a:	61fb      	str	r3, [r7, #28]
      break;
1000202c:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
1000202e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002032:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10002036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1000203a:	3301      	adds	r3, #1
1000203c:	ee07 3a90 	vmov	s15, r3
10002040:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002044:	edd7 6a07 	vldr	s13, [r7, #28]
10002048:	eec6 7a87 	vdiv.f32	s15, s13, s14
1000204c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10002050:	ee17 2a90 	vmov	r2, s15
10002054:	687b      	ldr	r3, [r7, #4]
10002056:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
10002058:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000205c:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10002060:	0a1b      	lsrs	r3, r3, #8
10002062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10002066:	3301      	adds	r3, #1
10002068:	ee07 3a90 	vmov	s15, r3
1000206c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002070:	edd7 6a07 	vldr	s13, [r7, #28]
10002074:	eec6 7a87 	vdiv.f32	s15, s13, s14
10002078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1000207c:	ee17 2a90 	vmov	r2, s15
10002080:	687b      	ldr	r3, [r7, #4]
10002082:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
10002084:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002088:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
1000208c:	0c1b      	lsrs	r3, r3, #16
1000208e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10002092:	3301      	adds	r3, #1
10002094:	ee07 3a90 	vmov	s15, r3
10002098:	eeb8 7a67 	vcvt.f32.u32	s14, s15
1000209c:	edd7 6a07 	vldr	s13, [r7, #28]
100020a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
100020a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100020a8:	ee17 2a90 	vmov	r2, s15
100020ac:	687b      	ldr	r3, [r7, #4]
100020ae:	609a      	str	r2, [r3, #8]
}
100020b0:	bf00      	nop
100020b2:	3724      	adds	r7, #36	; 0x24
100020b4:	46bd      	mov	sp, r7
100020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
100020ba:	4770      	bx	lr
100020bc:	46000000 	.word	0x46000000
100020c0:	03d09000 	.word	0x03d09000
100020c4:	016e3600 	.word	0x016e3600
100020c8:	003d0900 	.word	0x003d0900

100020cc <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
100020cc:	b580      	push	{r7, lr}
100020ce:	b082      	sub	sp, #8
100020d0:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
100020d2:	2300      	movs	r3, #0
100020d4:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
100020d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020da:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
100020de:	f003 030f 	and.w	r3, r3, #15
100020e2:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
100020e4:	687b      	ldr	r3, [r7, #4]
100020e6:	2b09      	cmp	r3, #9
100020e8:	d901      	bls.n	100020ee <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
100020ea:	2309      	movs	r3, #9
100020ec:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
100020ee:	f000 f80f 	bl	10002110 <HAL_RCC_GetMCUSSFreq>
100020f2:	4602      	mov	r2, r0
100020f4:	687b      	ldr	r3, [r7, #4]
100020f6:	fa22 f303 	lsr.w	r3, r2, r3
}
100020fa:	4618      	mov	r0, r3
100020fc:	3708      	adds	r7, #8
100020fe:	46bd      	mov	sp, r7
10002100:	bd80      	pop	{r7, pc}

10002102 <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
10002102:	b580      	push	{r7, lr}
10002104:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
10002106:	f7ff ffe1 	bl	100020cc <HAL_RCC_GetMCUFreq>
1000210a:	4603      	mov	r3, r0
#endif
}
1000210c:	4618      	mov	r0, r3
1000210e:	bd80      	pop	{r7, pc}

10002110 <HAL_RCC_GetMCUSSFreq>:

  return axissfreq;
}

uint32_t HAL_RCC_GetMCUSSFreq()
{
10002110:	b580      	push	{r7, lr}
10002112:	b084      	sub	sp, #16
10002114:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
10002116:	2300      	movs	r3, #0
10002118:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
1000211a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000211e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10002120:	f003 0303 	and.w	r3, r3, #3
10002124:	2b03      	cmp	r3, #3
10002126:	d822      	bhi.n	1000216e <HAL_RCC_GetMCUSSFreq+0x5e>
10002128:	a201      	add	r2, pc, #4	; (adr r2, 10002130 <HAL_RCC_GetMCUSSFreq+0x20>)
1000212a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000212e:	bf00      	nop
10002130:	1000214f 	.word	0x1000214f
10002134:	10002163 	.word	0x10002163
10002138:	10002169 	.word	0x10002169
1000213c:	10002141 	.word	0x10002141
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10002140:	463b      	mov	r3, r7
10002142:	4618      	mov	r0, r3
10002144:	f7ff fec8 	bl	10001ed8 <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
10002148:	683b      	ldr	r3, [r7, #0]
1000214a:	60fb      	str	r3, [r7, #12]
      break;
1000214c:	e00f      	b.n	1000216e <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
1000214e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002152:	699b      	ldr	r3, [r3, #24]
10002154:	f003 0303 	and.w	r3, r3, #3
10002158:	4a07      	ldr	r2, [pc, #28]	; (10002178 <HAL_RCC_GetMCUSSFreq+0x68>)
1000215a:	fa22 f303 	lsr.w	r3, r2, r3
1000215e:	60fb      	str	r3, [r7, #12]

      break;
10002160:	e005      	b.n	1000216e <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
10002162:	4b06      	ldr	r3, [pc, #24]	; (1000217c <HAL_RCC_GetMCUSSFreq+0x6c>)
10002164:	60fb      	str	r3, [r7, #12]
      break;
10002166:	e002      	b.n	1000216e <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
10002168:	4b05      	ldr	r3, [pc, #20]	; (10002180 <HAL_RCC_GetMCUSSFreq+0x70>)
1000216a:	60fb      	str	r3, [r7, #12]
      break;
1000216c:	bf00      	nop
  }

  return mcussfreq;
1000216e:	68fb      	ldr	r3, [r7, #12]
}
10002170:	4618      	mov	r0, r3
10002172:	3710      	adds	r7, #16
10002174:	46bd      	mov	sp, r7
10002176:	bd80      	pop	{r7, pc}
10002178:	03d09000 	.word	0x03d09000
1000217c:	016e3600 	.word	0x016e3600
10002180:	003d0900 	.word	0x003d0900

10002184 <HAL_RCC_WAKEUP_IRQHandler>:
  * @brief This function handles the RCC Wake up interrupt (rcc_mcu_wkup_irq/rcc_mpu_wkup_irq)
  * @note This API should be called under the RCC_WAKEUP_Handler().
  * @retval None
  */
void HAL_RCC_WAKEUP_IRQHandler(void)
{
10002184:	b580      	push	{r7, lr}
10002186:	af00      	add	r7, sp, #0
  /* Check RCC WKUP flag is set */
  if (__HAL_RCC_GET_IT(RCC_IT_WKUP) != RESET)
10002188:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000218c:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
10002190:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
10002194:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
10002198:	d107      	bne.n	100021aa <HAL_RCC_WAKEUP_IRQHandler+0x26>
  {
    /* Clear the RCC WKUP flag bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_WKUP);
1000219a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000219e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
100021a2:	f8c3 2c18 	str.w	r2, [r3, #3096]	; 0xc18

    /* RCC WKUP interrupt user callback */
    HAL_RCC_WAKEUP_Callback();
100021a6:	f000 f802 	bl	100021ae <HAL_RCC_WAKEUP_Callback>
  }
}
100021aa:	bf00      	nop
100021ac:	bd80      	pop	{r7, pc}

100021ae <HAL_RCC_WAKEUP_Callback>:
/**
  * @brief  RCC WAKEUP interrupt callback
  * @retval None
  */
__weak void HAL_RCC_WAKEUP_Callback(void)
{
100021ae:	b480      	push	{r7}
100021b0:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_WAKEUP_Callback could be implemented in the user file
  */
}
100021b2:	bf00      	nop
100021b4:	46bd      	mov	sp, r7
100021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
100021ba:	4770      	bx	lr

100021bc <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
100021bc:	b580      	push	{r7, lr}
100021be:	b084      	sub	sp, #16
100021c0:	af00      	add	r7, sp, #0
100021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
100021c4:	687b      	ldr	r3, [r7, #4]
100021c6:	681b      	ldr	r3, [r3, #0]
100021c8:	2b00      	cmp	r3, #0
100021ca:	f000 8171 	beq.w	100024b0 <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
100021ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100021d4:	f003 0307 	and.w	r3, r3, #7
100021d8:	2b02      	cmp	r3, #2
100021da:	d108      	bne.n	100021ee <RCCEx_PLL2_Config+0x32>
100021dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100021e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100021e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100021ea:	f000 815f 	beq.w	100024ac <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
100021ee:	687b      	ldr	r3, [r7, #4]
100021f0:	681b      	ldr	r3, [r3, #0]
100021f2:	2b02      	cmp	r3, #2
100021f4:	f040 8130 	bne.w	10002458 <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
100021f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100021fe:	f003 0303 	and.w	r3, r3, #3
10002202:	2b00      	cmp	r3, #0
10002204:	d008      	beq.n	10002218 <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
10002206:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000220c:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10002210:	2b01      	cmp	r3, #1
10002212:	d001      	beq.n	10002218 <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
10002214:	2301      	movs	r3, #1
10002216:	e14c      	b.n	100024b2 <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10002218:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000221c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002220:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002228:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
1000222c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002234:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002238:	f023 0301 	bic.w	r3, r3, #1
1000223c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002240:	f7fe fade 	bl	10000800 <HAL_GetTick>
10002244:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10002246:	e008      	b.n	1000225a <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002248:	f7fe fada 	bl	10000800 <HAL_GetTick>
1000224c:	4602      	mov	r2, r0
1000224e:	68fb      	ldr	r3, [r7, #12]
10002250:	1ad3      	subs	r3, r2, r3
10002252:	2b64      	cmp	r3, #100	; 0x64
10002254:	d901      	bls.n	1000225a <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
10002256:	2303      	movs	r3, #3
10002258:	e12b      	b.n	100024b2 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000225a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000225e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002262:	f003 0302 	and.w	r3, r3, #2
10002266:	2b02      	cmp	r3, #2
10002268:	d0ee      	beq.n	10002248 <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
1000226a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000226e:	6a1b      	ldr	r3, [r3, #32]
10002270:	f003 0303 	and.w	r3, r3, #3
10002274:	2b02      	cmp	r3, #2
10002276:	d107      	bne.n	10002288 <RCCEx_PLL2_Config+0xcc>
10002278:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000227c:	6a1b      	ldr	r3, [r3, #32]
1000227e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002282:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002286:	d00e      	beq.n	100022a6 <RCCEx_PLL2_Config+0xea>
10002288:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000228c:	6a1b      	ldr	r3, [r3, #32]
1000228e:	f003 0303 	and.w	r3, r3, #3
10002292:	2b03      	cmp	r3, #3
10002294:	d112      	bne.n	100022bc <RCCEx_PLL2_Config+0x100>
10002296:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000229a:	6a1b      	ldr	r3, [r3, #32]
1000229c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100022a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100022a4:	d10a      	bne.n	100022bc <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
100022a6:	687b      	ldr	r3, [r7, #4]
100022a8:	685a      	ldr	r2, [r3, #4]
100022aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100022b0:	f003 0303 	and.w	r3, r3, #3
100022b4:	429a      	cmp	r2, r3
100022b6:	d00c      	beq.n	100022d2 <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
100022b8:	2301      	movs	r3, #1
100022ba:	e0fa      	b.n	100024b2 <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
100022bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100022c2:	f023 0203 	bic.w	r2, r3, #3
100022c6:	687b      	ldr	r3, [r7, #4]
100022c8:	685b      	ldr	r3, [r3, #4]
100022ca:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100022ce:	4313      	orrs	r3, r2
100022d0:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
100022d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022d6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
100022da:	4b78      	ldr	r3, [pc, #480]	; (100024bc <RCCEx_PLL2_Config+0x300>)
100022dc:	4013      	ands	r3, r2
100022de:	687a      	ldr	r2, [r7, #4]
100022e0:	68d2      	ldr	r2, [r2, #12]
100022e2:	1e51      	subs	r1, r2, #1
100022e4:	687a      	ldr	r2, [r7, #4]
100022e6:	6892      	ldr	r2, [r2, #8]
100022e8:	3a01      	subs	r2, #1
100022ea:	0412      	lsls	r2, r2, #16
100022ec:	430a      	orrs	r2, r1
100022ee:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100022f2:	4313      	orrs	r3, r2
100022f4:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
100022f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10002300:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10002304:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10002308:	687a      	ldr	r2, [r7, #4]
1000230a:	6912      	ldr	r2, [r2, #16]
1000230c:	1e51      	subs	r1, r2, #1
1000230e:	687a      	ldr	r2, [r7, #4]
10002310:	6952      	ldr	r2, [r2, #20]
10002312:	3a01      	subs	r2, #1
10002314:	0212      	lsls	r2, r2, #8
10002316:	4311      	orrs	r1, r2
10002318:	687a      	ldr	r2, [r7, #4]
1000231a:	6992      	ldr	r2, [r2, #24]
1000231c:	3a01      	subs	r2, #1
1000231e:	0412      	lsls	r2, r2, #16
10002320:	430a      	orrs	r2, r1
10002322:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002326:	4313      	orrs	r3, r2
10002328:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
1000232c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002330:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10002334:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1000233c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
10002340:	687b      	ldr	r3, [r7, #4]
10002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002344:	2b02      	cmp	r3, #2
10002346:	d003      	beq.n	10002350 <RCCEx_PLL2_Config+0x194>
10002348:	687b      	ldr	r3, [r7, #4]
1000234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000234c:	2b00      	cmp	r3, #0
1000234e:	d10c      	bne.n	1000236a <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
10002350:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002354:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10002358:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000235c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002360:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10002364:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
10002368:	e00f      	b.n	1000238a <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
1000236a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000236e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10002372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002376:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
1000237a:	687a      	ldr	r2, [r7, #4]
1000237c:	6a12      	ldr	r2, [r2, #32]
1000237e:	00d2      	lsls	r2, r2, #3
10002380:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002384:	4313      	orrs	r3, r2
10002386:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
1000238a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000238e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10002392:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1000239a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
1000239e:	687b      	ldr	r3, [r7, #4]
100023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100023a2:	2b02      	cmp	r3, #2
100023a4:	d124      	bne.n	100023f0 <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
100023a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
100023ae:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
100023b2:	687b      	ldr	r3, [r7, #4]
100023b4:	6a99      	ldr	r1, [r3, #40]	; 0x28
100023b6:	687b      	ldr	r3, [r7, #4]
100023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100023ba:	4319      	orrs	r1, r3
100023bc:	687b      	ldr	r3, [r7, #4]
100023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100023c0:	4319      	orrs	r1, r3
100023c2:	687b      	ldr	r3, [r7, #4]
100023c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100023c6:	4319      	orrs	r1, r3
100023c8:	687b      	ldr	r3, [r7, #4]
100023ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100023cc:	041b      	lsls	r3, r3, #16
100023ce:	430b      	orrs	r3, r1
100023d0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100023d4:	4313      	orrs	r3, r2
100023d6:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
100023da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100023e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100023e6:	f043 0304 	orr.w	r3, r3, #4
100023ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
100023ee:	e009      	b.n	10002404 <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
100023f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100023f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100023fc:	f023 0304 	bic.w	r3, r3, #4
10002400:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
10002404:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002408:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000240c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002410:	f043 0301 	orr.w	r3, r3, #1
10002414:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002418:	f7fe f9f2 	bl	10000800 <HAL_GetTick>
1000241c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
1000241e:	e008      	b.n	10002432 <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002420:	f7fe f9ee 	bl	10000800 <HAL_GetTick>
10002424:	4602      	mov	r2, r0
10002426:	68fb      	ldr	r3, [r7, #12]
10002428:	1ad3      	subs	r3, r2, r3
1000242a:	2b64      	cmp	r3, #100	; 0x64
1000242c:	d901      	bls.n	10002432 <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
1000242e:	2303      	movs	r3, #3
10002430:	e03f      	b.n	100024b2 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10002432:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000243a:	f003 0302 	and.w	r3, r3, #2
1000243e:	2b02      	cmp	r3, #2
10002440:	d1ee      	bne.n	10002420 <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10002442:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000244a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000244e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10002452:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
10002456:	e02b      	b.n	100024b0 <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10002458:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000245c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002460:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002468:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
1000246c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002470:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002474:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002478:	f023 0301 	bic.w	r3, r3, #1
1000247c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002480:	f7fe f9be 	bl	10000800 <HAL_GetTick>
10002484:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10002486:	e008      	b.n	1000249a <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002488:	f7fe f9ba 	bl	10000800 <HAL_GetTick>
1000248c:	4602      	mov	r2, r0
1000248e:	68fb      	ldr	r3, [r7, #12]
10002490:	1ad3      	subs	r3, r2, r3
10002492:	2b64      	cmp	r3, #100	; 0x64
10002494:	d901      	bls.n	1000249a <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
10002496:	2303      	movs	r3, #3
10002498:	e00b      	b.n	100024b2 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000249a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000249e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100024a2:	f003 0302 	and.w	r3, r3, #2
100024a6:	2b02      	cmp	r3, #2
100024a8:	d0ee      	beq.n	10002488 <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
100024aa:	e001      	b.n	100024b0 <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
100024ac:	2301      	movs	r3, #1
100024ae:	e000      	b.n	100024b2 <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
100024b0:	2300      	movs	r3, #0

}
100024b2:	4618      	mov	r0, r3
100024b4:	3710      	adds	r7, #16
100024b6:	46bd      	mov	sp, r7
100024b8:	bd80      	pop	{r7, pc}
100024ba:	bf00      	nop
100024bc:	ffc0fe00 	.word	0xffc0fe00

100024c0 <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
100024c0:	b580      	push	{r7, lr}
100024c2:	b084      	sub	sp, #16
100024c4:	af00      	add	r7, sp, #0
100024c6:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
100024c8:	687b      	ldr	r3, [r7, #4]
100024ca:	681b      	ldr	r3, [r3, #0]
100024cc:	2b00      	cmp	r3, #0
100024ce:	f000 815a 	beq.w	10002786 <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
100024d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100024d8:	f003 0303 	and.w	r3, r3, #3
100024dc:	2b03      	cmp	r3, #3
100024de:	d108      	bne.n	100024f2 <RCCEx_PLL3_Config+0x32>
100024e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100024e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100024ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100024ee:	f000 8148 	beq.w	10002782 <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
100024f2:	687b      	ldr	r3, [r7, #4]
100024f4:	681b      	ldr	r3, [r3, #0]
100024f6:	2b02      	cmp	r3, #2
100024f8:	f040 8119 	bne.w	1000272e <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100024fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002500:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002504:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
1000250c:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
10002510:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002514:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002518:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000251c:	f023 0301 	bic.w	r3, r3, #1
10002520:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002524:	f7fe f96c 	bl	10000800 <HAL_GetTick>
10002528:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
1000252a:	e008      	b.n	1000253e <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000252c:	f7fe f968 	bl	10000800 <HAL_GetTick>
10002530:	4602      	mov	r2, r0
10002532:	68fb      	ldr	r3, [r7, #12]
10002534:	1ad3      	subs	r3, r2, r3
10002536:	2b64      	cmp	r3, #100	; 0x64
10002538:	d901      	bls.n	1000253e <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
1000253a:	2303      	movs	r3, #3
1000253c:	e124      	b.n	10002788 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
1000253e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002542:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002546:	f003 0302 	and.w	r3, r3, #2
1000254a:	2b02      	cmp	r3, #2
1000254c:	d0ee      	beq.n	1000252c <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
1000254e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002552:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10002556:	f023 0203 	bic.w	r2, r3, #3
1000255a:	687b      	ldr	r3, [r7, #4]
1000255c:	685b      	ldr	r3, [r3, #4]
1000255e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002562:	4313      	orrs	r3, r2
10002564:	f8c1 3820 	str.w	r3, [r1, #2080]	; 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10002568:	e008      	b.n	1000257c <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000256a:	f7fe f949 	bl	10000800 <HAL_GetTick>
1000256e:	4602      	mov	r2, r0
10002570:	68fb      	ldr	r3, [r7, #12]
10002572:	1ad3      	subs	r3, r2, r3
10002574:	2b64      	cmp	r3, #100	; 0x64
10002576:	d901      	bls.n	1000257c <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
10002578:	2303      	movs	r3, #3
1000257a:	e105      	b.n	10002788 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
1000257c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002580:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10002584:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002588:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000258c:	d1ed      	bne.n	1000256a <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
1000258e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002592:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10002596:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
1000259a:	687b      	ldr	r3, [r7, #4]
1000259c:	69db      	ldr	r3, [r3, #28]
1000259e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100025a2:	4313      	orrs	r3, r2
100025a4:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
100025a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025ac:	f8d3 2884 	ldr.w	r2, [r3, #2180]	; 0x884
100025b0:	4b77      	ldr	r3, [pc, #476]	; (10002790 <RCCEx_PLL3_Config+0x2d0>)
100025b2:	4013      	ands	r3, r2
100025b4:	687a      	ldr	r2, [r7, #4]
100025b6:	68d2      	ldr	r2, [r2, #12]
100025b8:	1e51      	subs	r1, r2, #1
100025ba:	687a      	ldr	r2, [r7, #4]
100025bc:	6892      	ldr	r2, [r2, #8]
100025be:	3a01      	subs	r2, #1
100025c0:	0412      	lsls	r2, r2, #16
100025c2:	430a      	orrs	r2, r1
100025c4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100025c8:	4313      	orrs	r3, r2
100025ca:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884
100025ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025d2:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
100025d6:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
100025da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
100025de:	687a      	ldr	r2, [r7, #4]
100025e0:	6912      	ldr	r2, [r2, #16]
100025e2:	1e51      	subs	r1, r2, #1
100025e4:	687a      	ldr	r2, [r7, #4]
100025e6:	6952      	ldr	r2, [r2, #20]
100025e8:	3a01      	subs	r2, #1
100025ea:	0212      	lsls	r2, r2, #8
100025ec:	4311      	orrs	r1, r2
100025ee:	687a      	ldr	r2, [r7, #4]
100025f0:	6992      	ldr	r2, [r2, #24]
100025f2:	3a01      	subs	r2, #1
100025f4:	0412      	lsls	r2, r2, #16
100025f6:	430a      	orrs	r2, r1
100025f8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100025fc:	4313      	orrs	r3, r2
100025fe:	f8c1 3888 	str.w	r3, [r1, #2184]	; 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
10002602:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002606:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
1000260a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000260e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10002612:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
10002616:	687b      	ldr	r3, [r7, #4]
10002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000261a:	2b02      	cmp	r3, #2
1000261c:	d003      	beq.n	10002626 <RCCEx_PLL3_Config+0x166>
1000261e:	687b      	ldr	r3, [r7, #4]
10002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002622:	2b00      	cmp	r3, #0
10002624:	d10c      	bne.n	10002640 <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
10002626:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000262a:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
1000262e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002636:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
1000263a:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
1000263e:	e00f      	b.n	10002660 <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
10002640:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002644:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10002648:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000264c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10002650:	687a      	ldr	r2, [r7, #4]
10002652:	6a12      	ldr	r2, [r2, #32]
10002654:	00d2      	lsls	r2, r2, #3
10002656:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000265a:	4313      	orrs	r3, r2
1000265c:	f8c1 388c 	str.w	r3, [r1, #2188]	; 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
10002660:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002664:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10002668:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000266c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10002670:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10002674:	687b      	ldr	r3, [r7, #4]
10002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002678:	2b02      	cmp	r3, #2
1000267a:	d124      	bne.n	100026c6 <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
1000267c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002680:	f8d3 3890 	ldr.w	r3, [r3, #2192]	; 0x890
10002684:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10002688:	687b      	ldr	r3, [r7, #4]
1000268a:	6a99      	ldr	r1, [r3, #40]	; 0x28
1000268c:	687b      	ldr	r3, [r7, #4]
1000268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10002690:	4319      	orrs	r1, r3
10002692:	687b      	ldr	r3, [r7, #4]
10002694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10002696:	4319      	orrs	r1, r3
10002698:	687b      	ldr	r3, [r7, #4]
1000269a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000269c:	4319      	orrs	r1, r3
1000269e:	687b      	ldr	r3, [r7, #4]
100026a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100026a2:	041b      	lsls	r3, r3, #16
100026a4:	430b      	orrs	r3, r1
100026a6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100026aa:	4313      	orrs	r3, r2
100026ac:	f8c1 3890 	str.w	r3, [r1, #2192]	; 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
100026b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026b4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100026b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100026bc:	f043 0304 	orr.w	r3, r3, #4
100026c0:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
100026c4:	e009      	b.n	100026da <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
100026c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026ca:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100026ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100026d2:	f023 0304 	bic.w	r3, r3, #4
100026d6:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
100026da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026de:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100026e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100026e6:	f043 0301 	orr.w	r3, r3, #1
100026ea:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100026ee:	f7fe f887 	bl	10000800 <HAL_GetTick>
100026f2:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
100026f4:	e008      	b.n	10002708 <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100026f6:	f7fe f883 	bl	10000800 <HAL_GetTick>
100026fa:	4602      	mov	r2, r0
100026fc:	68fb      	ldr	r3, [r7, #12]
100026fe:	1ad3      	subs	r3, r2, r3
10002700:	2b64      	cmp	r3, #100	; 0x64
10002702:	d901      	bls.n	10002708 <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
10002704:	2303      	movs	r3, #3
10002706:	e03f      	b.n	10002788 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10002708:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000270c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002710:	f003 0302 	and.w	r3, r3, #2
10002714:	2b02      	cmp	r3, #2
10002716:	d1ee      	bne.n	100026f6 <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10002718:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000271c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002720:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002724:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10002728:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
1000272c:	e02b      	b.n	10002786 <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
1000272e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002732:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002736:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000273a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
1000273e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
10002742:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002746:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000274a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000274e:	f023 0301 	bic.w	r3, r3, #1
10002752:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002756:	f7fe f853 	bl	10000800 <HAL_GetTick>
1000275a:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
1000275c:	e008      	b.n	10002770 <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000275e:	f7fe f84f 	bl	10000800 <HAL_GetTick>
10002762:	4602      	mov	r2, r0
10002764:	68fb      	ldr	r3, [r7, #12]
10002766:	1ad3      	subs	r3, r2, r3
10002768:	2b64      	cmp	r3, #100	; 0x64
1000276a:	d901      	bls.n	10002770 <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
1000276c:	2303      	movs	r3, #3
1000276e:	e00b      	b.n	10002788 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002770:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002774:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002778:	f003 0302 	and.w	r3, r3, #2
1000277c:	2b02      	cmp	r3, #2
1000277e:	d0ee      	beq.n	1000275e <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
10002780:	e001      	b.n	10002786 <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10002782:	2301      	movs	r3, #1
10002784:	e000      	b.n	10002788 <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
10002786:	2300      	movs	r3, #0
}
10002788:	4618      	mov	r0, r3
1000278a:	3710      	adds	r7, #16
1000278c:	46bd      	mov	sp, r7
1000278e:	bd80      	pop	{r7, pc}
10002790:	ffc0fe00 	.word	0xffc0fe00

10002794 <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
10002794:	b580      	push	{r7, lr}
10002796:	b084      	sub	sp, #16
10002798:	af00      	add	r7, sp, #0
1000279a:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
1000279c:	687b      	ldr	r3, [r7, #4]
1000279e:	681b      	ldr	r3, [r3, #0]
100027a0:	2b00      	cmp	r3, #0
100027a2:	f000 8147 	beq.w	10002a34 <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
100027a6:	687b      	ldr	r3, [r7, #4]
100027a8:	681b      	ldr	r3, [r3, #0]
100027aa:	2b02      	cmp	r3, #2
100027ac:	f040 8119 	bne.w	100029e2 <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
100027b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100027b4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100027b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100027bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100027c0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
100027c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100027c8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100027cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100027d0:	f023 0301 	bic.w	r3, r3, #1
100027d4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100027d8:	f7fe f812 	bl	10000800 <HAL_GetTick>
100027dc:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100027de:	e008      	b.n	100027f2 <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100027e0:	f7fe f80e 	bl	10000800 <HAL_GetTick>
100027e4:	4602      	mov	r2, r0
100027e6:	68fb      	ldr	r3, [r7, #12]
100027e8:	1ad3      	subs	r3, r2, r3
100027ea:	2b64      	cmp	r3, #100	; 0x64
100027ec:	d901      	bls.n	100027f2 <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
100027ee:	2303      	movs	r3, #3
100027f0:	e121      	b.n	10002a36 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100027f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100027f6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100027fa:	f003 0302 	and.w	r3, r3, #2
100027fe:	2b02      	cmp	r3, #2
10002800:	d0ee      	beq.n	100027e0 <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
10002802:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002806:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
1000280a:	f023 0203 	bic.w	r2, r3, #3
1000280e:	687b      	ldr	r3, [r7, #4]
10002810:	685b      	ldr	r3, [r3, #4]
10002812:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002816:	4313      	orrs	r3, r2
10002818:	f8c1 3824 	str.w	r3, [r1, #2084]	; 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
1000281c:	e008      	b.n	10002830 <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000281e:	f7fd ffef 	bl	10000800 <HAL_GetTick>
10002822:	4602      	mov	r2, r0
10002824:	68fb      	ldr	r3, [r7, #12]
10002826:	1ad3      	subs	r3, r2, r3
10002828:	2b64      	cmp	r3, #100	; 0x64
1000282a:	d901      	bls.n	10002830 <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
1000282c:	2303      	movs	r3, #3
1000282e:	e102      	b.n	10002a36 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10002830:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002834:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10002838:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000283c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002840:	d1ed      	bne.n	1000281e <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
10002842:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002846:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
1000284a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
1000284e:	687b      	ldr	r3, [r7, #4]
10002850:	69db      	ldr	r3, [r3, #28]
10002852:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002856:	4313      	orrs	r3, r2
10002858:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
1000285c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002860:	f8d3 2898 	ldr.w	r2, [r3, #2200]	; 0x898
10002864:	4b76      	ldr	r3, [pc, #472]	; (10002a40 <RCCEx_PLL4_Config+0x2ac>)
10002866:	4013      	ands	r3, r2
10002868:	687a      	ldr	r2, [r7, #4]
1000286a:	68d2      	ldr	r2, [r2, #12]
1000286c:	1e51      	subs	r1, r2, #1
1000286e:	687a      	ldr	r2, [r7, #4]
10002870:	6892      	ldr	r2, [r2, #8]
10002872:	3a01      	subs	r2, #1
10002874:	0412      	lsls	r2, r2, #16
10002876:	430a      	orrs	r2, r1
10002878:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000287c:	4313      	orrs	r3, r2
1000287e:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898
10002882:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002886:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
1000288a:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
1000288e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10002892:	687a      	ldr	r2, [r7, #4]
10002894:	6912      	ldr	r2, [r2, #16]
10002896:	1e51      	subs	r1, r2, #1
10002898:	687a      	ldr	r2, [r7, #4]
1000289a:	6952      	ldr	r2, [r2, #20]
1000289c:	3a01      	subs	r2, #1
1000289e:	0212      	lsls	r2, r2, #8
100028a0:	4311      	orrs	r1, r2
100028a2:	687a      	ldr	r2, [r7, #4]
100028a4:	6992      	ldr	r2, [r2, #24]
100028a6:	3a01      	subs	r2, #1
100028a8:	0412      	lsls	r2, r2, #16
100028aa:	430a      	orrs	r2, r1
100028ac:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100028b0:	4313      	orrs	r3, r2
100028b2:	f8c1 389c 	str.w	r3, [r1, #2204]	; 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
100028b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100028ba:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100028be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100028c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
100028c6:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
100028ca:	687b      	ldr	r3, [r7, #4]
100028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100028ce:	2b02      	cmp	r3, #2
100028d0:	d003      	beq.n	100028da <RCCEx_PLL4_Config+0x146>
100028d2:	687b      	ldr	r3, [r7, #4]
100028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100028d6:	2b00      	cmp	r3, #0
100028d8:	d10c      	bne.n	100028f4 <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
100028da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100028de:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100028e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100028e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100028ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100028ee:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
100028f2:	e00f      	b.n	10002914 <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
100028f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100028f8:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100028fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002900:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10002904:	687a      	ldr	r2, [r7, #4]
10002906:	6a12      	ldr	r2, [r2, #32]
10002908:	00d2      	lsls	r2, r2, #3
1000290a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000290e:	4313      	orrs	r3, r2
10002910:	f8c1 38a0 	str.w	r3, [r1, #2208]	; 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
10002914:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002918:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
1000291c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10002924:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10002928:	687b      	ldr	r3, [r7, #4]
1000292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000292c:	2b02      	cmp	r3, #2
1000292e:	d124      	bne.n	1000297a <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
10002930:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002934:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	; 0x8a4
10002938:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
1000293c:	687b      	ldr	r3, [r7, #4]
1000293e:	6a99      	ldr	r1, [r3, #40]	; 0x28
10002940:	687b      	ldr	r3, [r7, #4]
10002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10002944:	4319      	orrs	r1, r3
10002946:	687b      	ldr	r3, [r7, #4]
10002948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000294a:	4319      	orrs	r1, r3
1000294c:	687b      	ldr	r3, [r7, #4]
1000294e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10002950:	4319      	orrs	r1, r3
10002952:	687b      	ldr	r3, [r7, #4]
10002954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10002956:	041b      	lsls	r3, r3, #16
10002958:	430b      	orrs	r3, r1
1000295a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000295e:	4313      	orrs	r3, r2
10002960:	f8c1 38a4 	str.w	r3, [r1, #2212]	; 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
10002964:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002968:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000296c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002970:	f043 0304 	orr.w	r3, r3, #4
10002974:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10002978:	e009      	b.n	1000298e <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
1000297a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000297e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002982:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002986:	f023 0304 	bic.w	r3, r3, #4
1000298a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
1000298e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002992:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002996:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000299a:	f043 0301 	orr.w	r3, r3, #1
1000299e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100029a2:	f7fd ff2d 	bl	10000800 <HAL_GetTick>
100029a6:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
100029a8:	e008      	b.n	100029bc <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100029aa:	f7fd ff29 	bl	10000800 <HAL_GetTick>
100029ae:	4602      	mov	r2, r0
100029b0:	68fb      	ldr	r3, [r7, #12]
100029b2:	1ad3      	subs	r3, r2, r3
100029b4:	2b64      	cmp	r3, #100	; 0x64
100029b6:	d901      	bls.n	100029bc <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
100029b8:	2303      	movs	r3, #3
100029ba:	e03c      	b.n	10002a36 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
100029bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100029c0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100029c4:	f003 0302 	and.w	r3, r3, #2
100029c8:	2b02      	cmp	r3, #2
100029ca:	d1ee      	bne.n	100029aa <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
100029cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100029d0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100029d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100029d8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
100029dc:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
100029e0:	e028      	b.n	10002a34 <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
100029e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100029e6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100029ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100029ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100029f2:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
100029f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100029fa:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100029fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002a02:	f023 0301 	bic.w	r3, r3, #1
10002a06:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002a0a:	f7fd fef9 	bl	10000800 <HAL_GetTick>
10002a0e:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002a10:	e008      	b.n	10002a24 <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002a12:	f7fd fef5 	bl	10000800 <HAL_GetTick>
10002a16:	4602      	mov	r2, r0
10002a18:	68fb      	ldr	r3, [r7, #12]
10002a1a:	1ad3      	subs	r3, r2, r3
10002a1c:	2b64      	cmp	r3, #100	; 0x64
10002a1e:	d901      	bls.n	10002a24 <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
10002a20:	2303      	movs	r3, #3
10002a22:	e008      	b.n	10002a36 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002a24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002a28:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002a2c:	f003 0302 	and.w	r3, r3, #2
10002a30:	2b02      	cmp	r3, #2
10002a32:	d0ee      	beq.n	10002a12 <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
10002a34:	2300      	movs	r3, #0
}
10002a36:	4618      	mov	r0, r3
10002a38:	3710      	adds	r7, #16
10002a3a:	46bd      	mov	sp, r7
10002a3c:	bd80      	pop	{r7, pc}
10002a3e:	bf00      	nop
10002a40:	ffc0fe00 	.word	0xffc0fe00

10002a44 <memset>:
10002a44:	4402      	add	r2, r0
10002a46:	4603      	mov	r3, r0
10002a48:	4293      	cmp	r3, r2
10002a4a:	d100      	bne.n	10002a4e <memset+0xa>
10002a4c:	4770      	bx	lr
10002a4e:	f803 1b01 	strb.w	r1, [r3], #1
10002a52:	e7f9      	b.n	10002a48 <memset+0x4>

10002a54 <__libc_init_array>:
10002a54:	b570      	push	{r4, r5, r6, lr}
10002a56:	4d0d      	ldr	r5, [pc, #52]	; (10002a8c <__libc_init_array+0x38>)
10002a58:	4c0d      	ldr	r4, [pc, #52]	; (10002a90 <__libc_init_array+0x3c>)
10002a5a:	1b64      	subs	r4, r4, r5
10002a5c:	10a4      	asrs	r4, r4, #2
10002a5e:	2600      	movs	r6, #0
10002a60:	42a6      	cmp	r6, r4
10002a62:	d109      	bne.n	10002a78 <__libc_init_array+0x24>
10002a64:	4d0b      	ldr	r5, [pc, #44]	; (10002a94 <__libc_init_array+0x40>)
10002a66:	4c0c      	ldr	r4, [pc, #48]	; (10002a98 <__libc_init_array+0x44>)
10002a68:	f000 f818 	bl	10002a9c <_init>
10002a6c:	1b64      	subs	r4, r4, r5
10002a6e:	10a4      	asrs	r4, r4, #2
10002a70:	2600      	movs	r6, #0
10002a72:	42a6      	cmp	r6, r4
10002a74:	d105      	bne.n	10002a82 <__libc_init_array+0x2e>
10002a76:	bd70      	pop	{r4, r5, r6, pc}
10002a78:	f855 3b04 	ldr.w	r3, [r5], #4
10002a7c:	4798      	blx	r3
10002a7e:	3601      	adds	r6, #1
10002a80:	e7ee      	b.n	10002a60 <__libc_init_array+0xc>
10002a82:	f855 3b04 	ldr.w	r3, [r5], #4
10002a86:	4798      	blx	r3
10002a88:	3601      	adds	r6, #1
10002a8a:	e7f2      	b.n	10002a72 <__libc_init_array+0x1e>
10002a8c:	10002b04 	.word	0x10002b04
10002a90:	10002b04 	.word	0x10002b04
10002a94:	10002b04 	.word	0x10002b04
10002a98:	10002b08 	.word	0x10002b08

10002a9c <_init>:
10002a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002a9e:	bf00      	nop
10002aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
10002aa2:	bc08      	pop	{r3}
10002aa4:	469e      	mov	lr, r3
10002aa6:	4770      	bx	lr

10002aa8 <_fini>:
10002aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002aaa:	bf00      	nop
10002aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
10002aae:	bc08      	pop	{r3}
10002ab0:	469e      	mov	lr, r3
10002ab2:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

10002ab4 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
10002ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 10002aec <LoopForever+0x2>
  movs  r1, #0
10002ab8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10002aba:	e003      	b.n	10002ac4 <LoopCopyDataInit>

10002abc <CopyDataInit>:
  ldr  r3, =_sidata
10002abc:	4b0c      	ldr	r3, [pc, #48]	; (10002af0 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
10002abe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10002ac0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10002ac2:	3104      	adds	r1, #4

10002ac4 <LoopCopyDataInit>:
  ldr  r0, =_sdata
10002ac4:	480b      	ldr	r0, [pc, #44]	; (10002af4 <LoopForever+0xa>)
  ldr  r3, =_edata
10002ac6:	4b0c      	ldr	r3, [pc, #48]	; (10002af8 <LoopForever+0xe>)
  adds  r2, r0, r1
10002ac8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10002aca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10002acc:	d3f6      	bcc.n	10002abc <CopyDataInit>
  ldr  r2, =_sbss
10002ace:	4a0b      	ldr	r2, [pc, #44]	; (10002afc <LoopForever+0x12>)
  b  LoopFillZerobss
10002ad0:	e002      	b.n	10002ad8 <LoopFillZerobss>

10002ad2 <FillZerobss>:
  movs  r3, #0
10002ad2:	2300      	movs	r3, #0
  str  r3, [r2], #4
10002ad4:	f842 3b04 	str.w	r3, [r2], #4

10002ad8 <LoopFillZerobss>:
  ldr  r3, = _ebss
10002ad8:	4b09      	ldr	r3, [pc, #36]	; (10002b00 <LoopForever+0x16>)
  cmp  r2, r3
10002ada:	429a      	cmp	r2, r3
  bcc  FillZerobss
10002adc:	d3f9      	bcc.n	10002ad2 <FillZerobss>
  bl  SystemInit
10002ade:	f7fd faaf 	bl	10000040 <SystemInit>
 bl __libc_init_array
10002ae2:	f7ff ffb7 	bl	10002a54 <__libc_init_array>
  bl main
10002ae6:	f7fd fb63 	bl	100001b0 <main>

10002aea <LoopForever>:
    b LoopForever
10002aea:	e7fe      	b.n	10002aea <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
10002aec:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
10002af0:	10002b0c 	.word	0x10002b0c
  ldr  r0, =_sdata
10002af4:	10020000 	.word	0x10020000
  ldr  r3, =_edata
10002af8:	1002000c 	.word	0x1002000c
  ldr  r2, =_sbss
10002afc:	1002000c 	.word	0x1002000c
  ldr  r3, = _ebss
10002b00:	1002042c 	.word	0x1002042c
